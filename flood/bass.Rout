
R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> load("data/flood_data.RData")
> mySeed <- 9999
> 
> storms <- 1:5
> stormsTest <- 6:10
> nTestSubj <- length(stormsTest)
> inputs <- inputs[c(storms, stormsTest), ]
> out <- out[c(storms, stormsTest), ]
> indexTest <- readRDS("results/test_points.RDS")
> nTest <- length(indexTest)
> 
> library(BASS)
> set.seed(mySeed)
> model <- bassPCA(inputs[-stormsTest, ], out[-stormsTest, ], n.pc = 3, n.cores = 1)
MCMC Start #-- Oct 30 12:52:10 PM --# nbasis: 0 
MCMC iteration 1000 #-- Oct 30 12:52:11 PM --# nbasis: 1 
MCMC iteration 2000 #-- Oct 30 12:52:12 PM --# nbasis: 2 
MCMC iteration 3000 #-- Oct 30 12:52:12 PM --# nbasis: 1 
MCMC iteration 4000 #-- Oct 30 12:52:13 PM --# nbasis: 1 
MCMC iteration 5000 #-- Oct 30 12:52:14 PM --# nbasis: 1 
MCMC iteration 6000 #-- Oct 30 12:52:14 PM --# nbasis: 1 
MCMC iteration 7000 #-- Oct 30 12:52:15 PM --# nbasis: 1 
MCMC iteration 8000 #-- Oct 30 12:52:15 PM --# nbasis: 1 
MCMC iteration 9000 #-- Oct 30 12:52:16 PM --# nbasis: 1 
MCMC iteration 10000 #-- Oct 30 12:52:17 PM --# nbasis: 1 
MCMC Start #-- Oct 30 12:52:17 PM --# nbasis: 0 
MCMC iteration 1000 #-- Oct 30 12:52:17 PM --# nbasis: 2 
MCMC iteration 2000 #-- Oct 30 12:52:18 PM --# nbasis: 0 
MCMC iteration 3000 #-- Oct 30 12:52:18 PM --# nbasis: 1 
MCMC iteration 4000 #-- Oct 30 12:52:19 PM --# nbasis: 1 
MCMC iteration 5000 #-- Oct 30 12:52:20 PM --# nbasis: 0 
MCMC iteration 6000 #-- Oct 30 12:52:20 PM --# nbasis: 1 
MCMC iteration 7000 #-- Oct 30 12:52:21 PM --# nbasis: 2 
MCMC iteration 8000 #-- Oct 30 12:52:21 PM --# nbasis: 2 
MCMC iteration 9000 #-- Oct 30 12:52:22 PM --# nbasis: 0 
MCMC iteration 10000 #-- Oct 30 12:52:23 PM --# nbasis: 1 
MCMC Start #-- Oct 30 12:52:23 PM --# nbasis: 0 
MCMC iteration 1000 #-- Oct 30 12:52:23 PM --# nbasis: 2 
MCMC iteration 2000 #-- Oct 30 12:52:24 PM --# nbasis: 1 
MCMC iteration 3000 #-- Oct 30 12:52:25 PM --# nbasis: 1 
MCMC iteration 4000 #-- Oct 30 12:52:25 PM --# nbasis: 1 
MCMC iteration 5000 #-- Oct 30 12:52:26 PM --# nbasis: 1 
MCMC iteration 6000 #-- Oct 30 12:52:26 PM --# nbasis: 1 
MCMC iteration 7000 #-- Oct 30 12:52:27 PM --# nbasis: 1 
MCMC iteration 8000 #-- Oct 30 12:52:28 PM --# nbasis: 0 
MCMC iteration 9000 #-- Oct 30 12:52:28 PM --# nbasis: 0 
MCMC iteration 10000 #-- Oct 30 12:52:29 PM --# nbasis: 1 
> predictions <- predict(model, inputs[stormsTest, ])[ , , indexTest]
> 
> bassPreds <- apply(predictions, 2:3, mean)
> bassLower <- apply(predictions, 2:3, quantile, .025)
> bassUpper <- apply(predictions, 2:3, quantile, .975)
> bass <- list(preds = bassPreds, lower = bassLower, upper = bassUpper)
> saveRDS(bass, "results/flood_results_bass.RDS")
> 
> mspe <- sapply(1:nTestSubj, \(i) mean((bassPreds[i, ] - out[stormsTest[i], indexTest])^2) )
> mean(mspe)
[1] 1.446127
> 
> pct <- sapply(1:nTestSubj, \(i) mean((bassPreds[i, ] >= 4/3.28084) == (out[stormsTest[i], indexTest] >= 4/3.28084)) )
> 1-mean(pct)
[1] 0.09839034
> 
> proc.time()
   user  system elapsed 
 36.879   3.099  40.168 
