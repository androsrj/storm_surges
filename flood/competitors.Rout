
R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> rm(list = ls())
> gc()
         used (Mb) gc trigger   (Mb)   max used   (Mb)
Ncells 275608 14.8     506697   27.1     506697   27.1
Vcells 462929  3.6 1056132336 8057.7 1200193280 9156.8
> 
> # Libraries
> library(parallel) # For parallel computation
> library(doParallel) # For parallel computation
Loading required package: foreach
Loading required package: iterators
> library(foreach) # For parallel computation
> library(BayesTree) # For BART
> library(spNNGP) # For NNGP
Loading required package: coda
Loading required package: Formula
Loading required package: RANN
> 
> # Read in
> load("data/flood_data.RData")
> 
> # Clusters and seed
> nCores <- 10
> mySeed <- 123
> 
> # Read in indices for train and test data
> n <- nrow(coords)
> indices <- readRDS("results/data_split.RDS")
> indexTrain <- indices[[1]]
> indexTest <- indices[[2]]
> nTrain <- length(indexTrain)
> nTest <- length(indexTest)
> 
> storms <- 1:5
> stormsTest <- 6:10
> Y <- lapply(storms, \(i) out[i, ])
> X <- lapply(storms, \(i) {
+   Xstorm <- matrix(rep(unlist(inputs[i, ]), n), ncol = 5, byrow = TRUE)
+   Xelev <- coords$elev_meters #[indexTrain]
+   X <- cbind(Xstorm, Xelev)
+   colnames(X) <- c(colnames(inputs), "elev")
+   return(X)
+ })
> S <- coords[ , 1:2]
> 
> YTest <- lapply(stormsTest, \(i) out[i, ])
> XTest <- lapply(stormsTest, \(i) {
+   Xstorm <- matrix(rep(unlist(inputs[i, ]), n), ncol = 5, byrow = TRUE)
+   Xelev <- coords$elev_meters #[indexTest]
+   X <- cbind(Xstorm, Xelev)
+   colnames(X) <- c(colnames(inputs), "elev")
+   return(X)
+ })
> #STest <- coords[indexTest, 1:2]
> 
> ## BART
> cl <- makeCluster(nCores)
> registerDoParallel(cl)
> strt <- Sys.time()
> set.seed(mySeed)
> results <- foreach(i = storms, .packages = "BayesTree") %dopar% bart(X[[i]], Y[[i]], XTest[[i]])
> final.time <- Sys.time() - strt
> stopCluster(cl)
> if (file.exists(".RData")) {
+   file.remove(".RData")
+ }
> gc()
            used   (Mb) gc trigger   (Mb)   max used   (Mb)
Ncells    399205   21.4     887237   47.4     506697   27.1
Vcells 701216034 5349.9 1056132336 8057.7 1200193280 9156.8
> 
> saveRDS(results, "results/flood_results_bart.RDS")
> 
> ## NNGP
> nIter <- 2000
> cov.model <- "exponential"
> starting <- list("phi"=5, "sigma.sq"=1, "tau.sq"=0.2)
> tuning <- list("phi"=0.1, "sigma.sq"=5, "tau.sq"=2)
> priors <- list("phi.Unif"=c(1,20), "sigma.sq.IG"=c(1, 1), "tau.sq.IG"=c(1, 1))
> 
> # Remove global attributes from X train and test
> X <- lapply(storms, \(i) coords$elev_meters)
> XTest <- lapply(stormsTest, \(i) coords$elev_meters)
> 
> cl <- makeCluster(nCores)
> registerDoParallel(cl)
> strt <- Sys.time()
> set.seed(mySeed)
> nngp_obj <- foreach(i = storms, .packages = "spNNGP") %dopar% spNNGP(Y[[i]] ~ X[[i]], coords=S, 
+                                                                      starting=starting, method="latent", 
+                                                                      n.neighbors=10, tuning=tuning, 
+                                                                      priors=priors, cov.model=cov.model,
+                                                                      n.samples=nIter, n.omp.threads=1, fit.rep=TRUE)
> gc()
             used    (Mb) gc trigger    (Mb)   max used    (Mb)
Ncells     454411    24.3     887237    47.4     508185    27.2
Vcells 1696952905 12946.8 2445917896 18660.9 1696957022 12946.8
> #nngp_preds <- foreach(i = stormsTest, .packages="spNNGP") %dopar% predict(nngp_obj[[i - 5]], 
> #                                                                      matrix(c(rep(1, n), XTest[[i - 5]]), ncol = 2), 
> #                                                                      as.matrix(S))
> final.time <- Sys.time() - strt
> stopCluster(cl)
> if (file.exists(".RData")) {
+   file.remove(".RData")
+ }
> gc()
             used    (Mb) gc trigger    (Mb)   max used    (Mb)
Ncells     454411    24.3     887237    47.4     508185    27.2
Vcells 1696952905 12946.8 2445917896 18660.9 1696964547 12946.9
> 
> #saveRDS(list(obj = nngp_obj, preds = nngp_preds), "results/flood_results_nngp.RDS")
> saveRDS(nngp_obj, "results/flood_results_nngp.RDS")
> 
> proc.time()
    user   system  elapsed 
 562.220   27.751 4605.130 
