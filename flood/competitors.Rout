
R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 273690 14.7     660857 35.3   451905 24.2
Vcells 459126  3.6    8388608 64.0  1800280 13.8
> 
> # Libraries
> library(parallel) # For parallel computation
> library(doParallel) # For parallel computation
Loading required package: foreach
Loading required package: iterators
> library(foreach) # For parallel computation
> library(BayesTree) # For BART
> library(spNNGP) # For NNGP
Loading required package: coda
Loading required package: Formula
Loading required package: RANN
> 
> # Read in
> load("data/flood_data.RData")
> 
> # Clusters and seed
> nCores <- 10
> mySeed <- 123
> 
> # Read in indices for train and test data
> nObs <- nrow(coords)
> indices <- readRDS("results/data_split.RDS")
> indexTrain <- indices[[1]]
> indexTest <- indices[[2]]
> nTrain <- n <- length(indexTrain)
> nTest <- length(indexTest)
> 
> storms <- 1:10
> Y <- lapply(storms, \(i) out[i, indexTrain])
> X <- lapply(storms, \(i) {
+   #Xintercept <- rep(1, nTrain)
+   Xstorm <- matrix(rep(unlist(inputs[i, ]), nTrain), ncol = 5, byrow = TRUE)
+   Xelev <- coords$elev_meters[indexTrain]
+   X <- cbind(Xstorm, Xelev)
+   colnames(X) <- c(colnames(inputs), "elev")
+   return(X)
+ })
> S <- coords[indexTrain, 1:2]
> 
> YTest <- lapply(storms, \(i) out[i, indexTest])
> XTest <- lapply(storms, \(i) {
+   #Xintercept <- rep(1, nTest)
+   Xstorm <- matrix(rep(unlist(inputs[i, ]), nTest), ncol = 5, byrow = TRUE)
+   Xelev <- coords$elev_meters[indexTest]
+   X <- cbind(Xstorm, Xelev)
+   colnames(X) <- c(colnames(inputs), "elev")
+   return(X)
+ })
> STest <- coords[indexTest, 1:2]
> 
> ## BART
> #cl <- makeCluster(nCores)
> #registerDoParallel(cl)
> #strt <- Sys.time()
> #set.seed(mySeed)
> #results <- foreach(i = storms, .packages = "BayesTree") %dopar% bart(X[[i]], Y[[i]], XTest[[i]])
> #final.time <- Sys.time() - strt
> #stopCluster(cl)
> if (file.exists(".RData")) {
+   file.remove(".RData")
+ }
> gc()
            used   (Mb) gc trigger   (Mb)  max used   (Mb)
Ncells    381366   20.4     660857   35.3    657238   35.2
Vcells 203343885 1551.4  289978942 2212.4 211880333 1616.6
> 
> #saveRDS(results, "results/flood_results_bart.RDS")
> 
> ## NNGP
> nIter <- 1000
> cov.model <- "exponential"
> starting <- list("phi"=20, "sigma.sq"=1, "tau.sq"=0.2)
> tuning <- list("phi"=5, "sigma.sq"=5, "tau.sq"=2)
> priors <- list("phi.Unif"=c(1,100), "sigma.sq.IG"=c(1, 1), "tau.sq.IG"=c(1, 1))
> 
> cl <- makeCluster(nCores)
> registerDoParallel(cl)
> strt <- Sys.time()
> set.seed(mySeed)
> nngp_obj <- foreach(i = storms, .packages = "spNNGP") %dopar% spNNGP(Y[[i]] ~ X[[i]][,6], coords=S, 
+                                                                      starting=starting, method="latent", 
+                                                                      n.neighbors=10, tuning=tuning, 
+                                                                      priors=priors, cov.model=cov.model,
+                                                                      n.samples=nIter, n.omp.threads=1)
> nngp_preds <- foreach(i = storms, .packages="spNNGP") %dopar% predict(nngp_obj[[i]], 
+                                                                       XTest[[i]][,6], 
+                                                                       STest)
Error in predict(nngp_obj[[i]], XTest[[i]][, 6], STest) : 
  task 1 failed - "error: X.0 must be a data.frame or matrix
"
Calls: %dopar% -> <Anonymous>
Execution halted
