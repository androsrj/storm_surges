
R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 273690 14.7     660857 35.3   451905 24.2
Vcells 459126  3.6    8388608 64.0  1800280 13.8
> 
> # Libraries
> library(parallel) # For parallel computation
> library(doParallel) # For parallel computation
Loading required package: foreach
Loading required package: iterators
> library(foreach) # For parallel computation
> library(BayesTree) # For BART
> 
> # Read in
> load("data/flood_data.RData")
> 
> # Clusters and seed
> nCores <- 10
> mySeed <- 123
> 
> # Randomly sample indices for train and test data
> nObs <- nrow(coords)
> indices <- readRDS("results/data_split.RDS")
> indexTrain <- indices[[1]]
> indexTest <- indices[[2]]
> nTrain <- n <- length(indexTrain)
> nTest <- length(indexTest)
> 
> storms <- 1:10
> Y <- lapply(storms, \(i) out[i, indexTrain])
> X <- lapply(storms, \(i) {
+   Xintercept <- rep(1, nTrain)
+   Xstorm <- matrix(rep(unlist(inputs[i, ]), nTrain), ncol = 5, byrow = TRUE)
+   Xelev <- coords$elev_meters[indexTrain]
+   X <- cbind(Xintercept, Xstorm, Xelev)
+   colnames(X) <- c("int", colnames(inputs), "elev")
+   return(X)
+ })
> 
> YTest <- lapply(storms, \(i) out[i, indexTest])
> XTest <- lapply(storms, \(i) {
+   Xintercept <- rep(1, nTest)
+   Xstorm <- matrix(rep(unlist(inputs[i, ]), nTest), ncol = 5, byrow = TRUE)
+   Xelev <- coords$elev_meters[indexTest]
+   X <- cbind(Xintercept, Xstorm, Xelev)
+   colnames(X) <- c("int", colnames(inputs), "elev")
+   return(X)
+ })
> 
> 
> cl <- makeCluster(nCores)
> registerDoParallel(cl)
> strt <- Sys.time()
> set.seed(mySeed)
> results <- foreach(i = storms, .packages = "BayesTree") %dopar% bart(X[[i]], Y[[i]], XTest[[i]])
> final.time <- Sys.time() - strt
> stopCluster(cl)
> if (file.exists(".RData")) {
+   file.remove(".RData")
+ }
> gc()
            used   (Mb) gc trigger   (Mb)  max used   (Mb)
Ncells    366014   19.6     660857   35.3    540700   28.9
Vcells 701911624 5355.2  869773821 6635.9 701963655 5355.6
> 
> saveRDS(results, "results/flood_results_bart.RDS")
> 
> #wassersteinMeans <- rowMeans(sapply(results, \(x) unlist(x$posteriorMedians)))
> #wassersteinLower <- rowMeans(sapply(results, \(x) unlist(x$credLower)))
> #wassersteinUpper <- rowMeans(sapply(results, \(x) unlist(x$credUpper)))
> 
> #predsList <- lapply(results, \(x) x$preds)
> #predictions <- Reduce("+", predsList) / length(predsList)
> 
> #flood_results_bart <- list(lower = wassersteinLower,
> #                           upper = wassersteinUpper,
> #                           predictions = predictions,
> #                           time = final.time)
> 
> #saveRDS(flood_results_bart, "results/flood_results_bart.RDS")
> 
> 
> proc.time()
    user   system  elapsed 
 128.385    7.073 3018.314 
