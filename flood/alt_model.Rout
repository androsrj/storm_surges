
R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> # Clear environment and free unused memory
> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 275577 14.8     666000 35.6   456476 24.4
Vcells 462664  3.6    8388608 64.0  1820026 13.9
> 
> # SOURCES
> source("../mcmc_functions/mcmc.R") # Metropolis-Gibbs Sampler
> source("../mcmc_functions/priors.R")
> source("../mcmc_functions/jacobians.R")
> source("../mcmc_functions/likelihood.R")
> source("../mcmc_functions/posterior.R")
> source("../other_functions/parallel_functions.R") # Parallel wrapper functions
> source("../other_functions/helper_functions.R") # Other misc functions (not part of MCMC)
> 
> # Libraries
> library(parallel) # For parallel computation
> library(doParallel) # For parallel computation
Loading required package: foreach
Loading required package: iterators
> library(foreach) # For parallel computation
> library(mvtnorm)
> library(fields)
Loading required package: spam
Spam version 2.9-1 (2022-08-07) is loaded.
Type 'help( Spam)' or 'demo( spam)' for a short introduction 
and overview of this package.
Help for individual functions is also obtained by adding the
suffix '.spam' to the function name, e.g. 'help( chol.spam)'.

Attaching package: ‘spam’

The following objects are masked from ‘package:mvtnorm’:

    rmvnorm, rmvt

The following objects are masked from ‘package:base’:

    backsolve, forwardsolve

Loading required package: viridis
Loading required package: viridisLite

Try help(fields) to get started.
> library(MBA)
> library(anticlust) # for balanced clustering
> library(splitTools) # for stratified splitting
> 
> # Read in
> load("data/flood_data.RData")
> 
> # Clusters and seed
> nCores <- 2
> totalCores <- 10
> mySeed <- 1997
> test_subjects <- 6:10
> 
> # Randomly sample indices for train and test data
> n <- nrow(coords)
> pctTest <- 0.02
> nTest <- floor(pctTest * n)
> set.seed(mySeed)
> indexTest <- sort(sample(1:n, nTest))
> saveRDS(indexTest, "results/test_points.RDS")
> 
> # Divide using train and test indices
> storms <- 1:5
> Y <- lapply(storms, \(i) out[i, ])
> X <- lapply(storms, \(i) {
+   Xintercept <- rep(1, n)
+   Xstorm <- matrix(rep(unlist(inputs[i, ]), n), ncol = 5, byrow = TRUE)
+   Xelev <- coords$elev_meters
+   X <- cbind(Xintercept, Xstorm, Xelev)
+   colnames(X) <- c("int", colnames(inputs), "elev")
+   return(X)
+ })
> S <- as.matrix(coords[ , 1:2])
> D <- rdist(S)
> 
> YTest <- lapply(test_subjects, \(i) out[i, indexTest])
> XTest <- lapply(test_subjects, \(i) {
+   Xintercept <- rep(1, nTest)
+   Xstorm <- matrix(rep(unlist(inputs[i, ]), nTest), ncol = 5, byrow = TRUE)
+   Xelev <- coords$elev_meters[indexTest]
+   X <- cbind(Xintercept, Xstorm, Xelev)
+   colnames(X) <- c("int", colnames(inputs), "elev")
+   return(X)
+ })
> STest <- as.matrix(coords[indexTest, 1:2])
> DTest <- rdist(STest)
> 
> 
> # Sketching
> thetaVals <- seq(10^5, 10^6, length = totalCores)
> model <- "full_gp"
> mProp <- 0.01
> propSD <- c(0.03, 0.14)
> nSubj <- length(storms)
> nTestSubj <- length(test_subjects)
> 
> cl <- makeCluster(nCores)
> registerDoParallel(cl)
> strt <- Sys.time()
> set.seed(mySeed)
> obj <- foreach(i = storms, .packages = "mvtnorm") %dopar% sketching_parallel(i)  
> final.time <- Sys.time() - strt 
> stopCluster(cl)
> if (file.exists(".RData")) {
+   file.remove(".RData")
+ }
[1] TRUE
> gc()
             used    (Mb) gc trigger    (Mb)   max used    (Mb)
Ncells    1974613   105.5    3776342   201.7    2728088   145.7
Vcells 2702408074 20617.8 3856603468 29423.6 2703011143 20622.4
> flood_results_sketching <- wasserstein(results = obj, time = final.time)
> saveRDS(flood_results_sketching, paste0("results/flood_results_alt.RDS"))
> 
> 
> 
> 
> proc.time()
     user    system   elapsed 
   72.975    24.772 15883.936 
