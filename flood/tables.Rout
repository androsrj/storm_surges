
R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> sketching <- readRDS("results/flood_results_sketching.RDS")
> bart <- readRDS("results/flood_results_bart.RDS")
> data_split <- readRDS("results/data_split.RDS")
> indexTest <- data_split[[2]]
> nTest <- length(indexTest)
> load("data/flood_data.RData")
> test_subjects <- 1:10
> 
> # Parameter estimates
> sigma2 <- c(sketching$means['sigma2'], 
+             sketching$lower[1],
+             sketching$upper[1])
> tau2 <- c(sketching$means['tau2'], 
+           sketching$lower[2],
+           sketching$upper[2])
> beta <- c(sketching$means['beta7'], 
+           sketching$lower[9],
+           sketching$upper[9])
> 
> 
> length <- cvg <- score <- mspe <- pct <- matrix(0, nrow = length(test_subjects), ncol = 2)
> for (i in test_subjects) {
+   # True values
+   trueTest <- out[i, indexTest]
+   
+   # BART predictions
+   bartPreds <- bart[[i]]$yhat.test.mean
+   bartCI <- apply(bart[[i]]$yhat.test, 2, quantile, c(0.025, 0.975))
+   bartLower <- bartCI[1, ]
+   bartUpper <- bartCI[2, ]
+ 
+   # Sketching predictions
+   sketchPreds <- sketching$predictions[[i]][2, ]
+   sketchLower <- sketching$predictions[[i]][1, ]
+   sketchUpper <- sketching$predictions[[i]][3, ]
+   
+   # Length
+   lengthSketch <- mean(sketchUpper - sketchLower)
+   lengthBart <- mean(bartUpper - bartLower)
+   length[i, ] <- c(lengthSketch, lengthBart)
+ 
+   # Coverage
+   cvgSketch <- mean(sketchUpper > trueTest & sketchLower < trueTest)
+   cvgBart <- mean(bartUpper > trueTest & bartLower < trueTest)
+   cvg[i, ] <- c(cvgSketch, cvgBart)
+ 
+   # MSPE
+   mspeSketch <- mean((sketchPreds - trueTest)^2)
+   mspeBart <- mean((bartPreds - trueTest)^2)
+   mspe[i, ] <- c(mspeSketch, mspeBart)
+ 
+   # Interval score
+   a <- 0.05
+   scoreSketch <- mean( (sketchUpper - sketchLower) + 
+                  2/a * (sketchLower - trueTest) * 
+                  (trueTest < sketchLower) + 
+                  2/a * (trueTest - sketchUpper) * 
+                  (trueTest > sketchUpper) ) 
+   scoreBart <- mean( (bartUpper - bartLower) +
+ 		   2/a * (bartLower - trueTest) *
+ 		   (trueTest < bartLower) + 
+ 		   2/a * (trueTest - bartUpper) * 
+ 		   (trueTest > bartUpper) )
+   score[i, ] <- c(scoreSketch, scoreBart)
+ 
+   # Over/under 4 feet
+   trueFeet <- trueTest * 3.28084
+   sketchFeet <- sketchPreds * 3.28084
+   trueOver <- trueFeet >= 4.0
+   sketchOver <- sketchFeet >= 4.0
+   sketchPct <- mean(trueOver == sketchOver)
+   bartFeet <- bartPreds * 3.28084
+   bartOver <- bartFeet >= 4.0
+   bartPct <- mean(trueOver == bartOver)
+   pct[i, ] <- c(sketchPct, bartPct)
+ }
> 
> length <- apply(length, 2, mean)
> cvg <- apply(cvg, 2, mean)
> mspe <- apply(mspe, 2, mean)
> score <- apply(score, 2, mean)
> pct <- 1 - apply(pct, 2, mean)
> 
> # Parameter estimates
> params <- data.frame(sigma2, tau2, beta)
> rownames(params) <- c("mean", "lower", "upper")
> params
         sigma2      tau2       beta
mean  0.6647779 0.2516031 -0.5642734
lower 0.6611994 0.2504172 -0.5650098
upper 0.6682472 0.2528149 -0.5635357
> 
> # Predictive diagnostics (our approach vs BART)
> preds_df <- data.frame(cvg = cvg, 
+ 		       length = length, 
+ 		       mspe = mspe, 
+ 		       score = score, 
+ 		       pct = pct)
> rownames(preds_df) <- c("Sketching", "BART")
> preds_df
                 cvg     length      mspe     score        pct
Sketching 0.93596138 3.64519833 1.0361617  4.595129 0.14300080
BART      0.07240547 0.08289603 0.5198674 19.145019 0.06918745
> 
> # Also make sure that acceptance rates are satisfactory
> sketching$acc
 sigma2    tau2 
0.25276 0.25084 
> 
> proc.time()
   user  system elapsed 
 63.171   4.721  68.069 
