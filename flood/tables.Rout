
R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> source("../other_functions/helper_functions.R")
> sketching <- readRDS("results/flood_results_sketching.RDS")
> nngp <- readRDS("results/flood_results_nngp.RDS")
> bass <- readRDS("results/flood_results_bass.RDS")
> bart <- readRDS("results/flood_results_bart.RDS")
> indexTest <- readRDS("results/test_points.RDS")
> nTest <- length(indexTest)
> test_subjects <- 6:10
> nTestSubj <- length(test_subjects)
> load("data/flood_data.RData")
> n <- nrow(coords)
> 
> # Parameter estimates
> sigma2 <- c(sketching$means['sigma2'], 
+             sketching$lower[1],
+             sketching$upper[1])
> tau2 <- c(sketching$means['tau2'], 
+           sketching$lower[2],
+           sketching$upper[2])
> beta <- c(sketching$means['beta7'], 
+           sketching$lower[9],
+           sketching$upper[9])
> sketchParams <- data.frame(sigma2, tau2, beta)
> rownames(sketchParams) <- c("mean", "lower", "upper")
> 
> # Calculate all predictive diagnostics
> length <- cvg <- score <- mspe <- pct <- matrix(0, nrow = length(test_subjects), ncol = 4)
> for (i in 1:nTestSubj) {
+   # True values
+   trueTest <- out[test_subjects[i], indexTest]
+ 
+   # Sketching predictions for storm i
+   sketchPreds <- sketching$predictions[[i]][2, ]
+   sketchLower <- sketching$predictions[[i]][1, ]
+   sketchUpper <- sketching$predictions[[i]][3, ]
+ 
+   # BASS predictions for storm i
+   bassPreds <- bass$preds[i, ]
+   bassLower <- bass$lower[i, ]
+   bassUpper <- bass$upper[i, ]
+ 
+   # BART predictions for storm i
+   bartPreds <- bart$preds[((i - 1) * nTest + 1):(i * nTest)]
+   bartLower <- bart$lower[((i - 1) * nTest + 1):(i * nTest)]
+   bartUpper <- bart$upper[((i - 1) * nTest + 1):(i * nTest)]
+   
+   # Length
+   lengthSketch <- mean(sketchUpper - sketchLower)
+   lengthNNGP <- mean(nngp$upper - nngp$lower)
+   lengthBass <- mean(bassUpper - bassLower)
+   lengthBart <- mean(bartUpper - bartLower)
+   length[i, ] <- c(lengthSketch, lengthNNGP, lengthBass, lengthBart)
+ 
+   # Coverage
+   cvgSketch <- mean(sketchUpper > trueTest & sketchLower < trueTest)
+   cvgNNGP <- mean(nngp$upper > trueTest & nngp$lower < trueTest)
+   cvgBass <- mean(bassUpper > trueTest & bassLower < trueTest)
+   cvgBart <- mean(bartUpper > trueTest & bartLower < trueTest)
+   cvg[i, ] <- c(cvgSketch, cvgNNGP, cvgBass, cvgBart)
+ 
+   # MSPE
+   mspeSketch <- mean((sketchPreds - trueTest)^2)
+   mspeNNGP <- mean((nngp$preds - trueTest)^2)
+   mspeBass <- mean((bassPreds - trueTest)^2)
+   mspeBart <- mean((bartPreds - trueTest)^2)
+   mspe[i, ] <- c(mspeSketch, mspeNNGP, mspeBass, mspeBart)
+ 
+   # Interval score
+   a <- 0.05
+   scoreSketch <- mean( (sketchUpper - sketchLower) + 
+                  2/a * (sketchLower - trueTest) * 
+                  (trueTest < sketchLower) + 
+                  2/a * (trueTest - sketchUpper) * 
+                  (trueTest > sketchUpper) ) 
+   scoreNNGP <- mean( (nngp$upper - nngp$lower) +
+ 		   2/a * (nngp$lower - trueTest) *
+ 		   (trueTest < nngp$lower) + 
+ 		   2/a * (trueTest - nngp$upper) * 
+ 		   (trueTest > nngp$upper) )
+   scoreBass <- mean( (bassUpper - bassLower) +
+ 		   2/a * (bassLower - trueTest) *
+ 		   (trueTest < bassLower) + 
+ 		   2/a * (trueTest - bassUpper) *
+ 		   (trueTest > bassUpper) )
+   scoreBart <- mean( (bartUpper - bartLower) +
+ 		   2/a * (bartLower - trueTest) *
+ 		   (trueTest < bartLower) + 
+ 		   2/a * (trueTest - bartUpper) * 
+ 		   (trueTest > bartUpper) )
+   score[i, ] <- c(scoreSketch, scoreNNGP, scoreBass, scoreBart)
+ 
+   # Over/under 4 feet
+   trueFeet <- trueTest * 3.28084
+   trueOver <- trueFeet >= 4.0
+ 
+   sketchFeet <- sketchPreds * 3.28084
+   sketchOver <- sketchFeet >= 4.0
+   sketchPct <- mean(trueOver == sketchOver)
+ 
+   nngpFeet <- nngp$preds * 3.28084
+   nngpOver <- nngpFeet >= 4.0
+   nngpPct <- mean(trueOver == nngpOver)
+ 
+   bassFeet <- bassPreds * 3.28084
+   bassOver <- bassFeet >= 4.0
+   bassPct <- mean(trueOver == bassOver)
+   
+   bartFeet <- bartPreds * 3.28084
+   bartOver <- bartFeet >= 4.0
+   bartPct <- mean(trueOver == bartOver)
+ 
+   pct[i, ] <- c(sketchPct, nngpPct, bassPct, bartPct)
+ }
> 
> length <- apply(length, 2, mean)
> cvg <- apply(cvg, 2, mean)
> mspe <- apply(mspe, 2, mean)
> crps <- c(sketching$crps, nngp$crps, bass$crps, bart$crps)
> score <- apply(score, 2, mean)
> pct <- 1 - apply(pct, 2, mean)
> 
> # Parameter estimates
> 
> sketchParams
         sigma2      tau2       beta
mean  0.5737687 0.1991966 -0.7250043
lower 0.5463691 0.1375110 -0.7265169
upper 0.6361883 0.2260987 -0.7234924
> nngp$params
       sigma.sq     tau.sq       phi       beta
mean  0.5730806 0.02720180  672.5906 -0.2932438
lower 0.4473915 0.01115854  326.3794 -0.4301152
upper 0.6744484 0.09904543 2952.6426 -0.2211431
> 
> crps
[1] 1.5171287 1.0202603 0.4842495
> # Predictive diagnostics 
> preds_df <- data.frame(mspe = mspe,
+ 		       #crps = crps,
+ 		       cvg = cvg, 
+ 		       score = score, 
+ 		       pct = pct)
> rownames(preds_df) <- c("Sketching", "NNGP", "BASS", "BART")
> preds_df
               mspe       cvg     score        pct
Sketching 1.1890492 0.8851107  5.560502 0.08008048
NNGP      0.8319863 0.1702213 21.210930 0.08672032
BASS      0.6543402 0.9708249  6.549607 0.05573441
BART      0.6994082 0.8547284  5.329456 0.08390342
> 
> # Also make sure that acceptance rates are satisfactory
> sketching$acc
 sigma2    tau2 
0.21704 0.25980 
> 
> rm(list=ls())
> gc()
         used (Mb) gc trigger   (Mb)  max used   (Mb)
Ncells 352191 18.9     666002   35.6    666002   35.6
Vcells 636101  4.9  193259271 1474.5 200336946 1528.5
> if (file.exists(".RData")) {
+   remove(".RData")
+ }
Warning message:
In remove(".RData") : object '.RData' not found
> 
> proc.time()
   user  system elapsed 
  6.215   0.723   6.874 
