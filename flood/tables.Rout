
R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> sketching <- readRDS("results/flood_results_alt.RDS")
> nngp <- readRDS("results/flood_results_nngp.RDS")
> bass <- readRDS("results/flood_results_bass.RDS")
> bart <- readRDS("results/flood_results_bart.RDS")
> indexTest <- readRDS("results/test_points.RDS")
> nTest <- length(indexTest)
> test_subjects <- 6:10
> nTestSubj <- length(test_subjects)
> load("data/flood_data.RData")
> n <- nrow(coords)
> 
> # Parameter estimates
> sigma2 <- c(sketching$means['sigma2'], 
+             sketching$lower[1],
+             sketching$upper[1])
> tau2 <- c(sketching$means['tau2'], 
+           sketching$lower[2],
+           sketching$upper[2])
> beta <- c(sketching$means['beta7'], 
+           sketching$lower[9],
+           sketching$upper[9])
> sketchParams <- data.frame(sigma2, tau2, beta)
> rownames(sketchParams) <- c("mean", "lower", "upper")
> 
> # Calculate all predictive diagnostics
> length <- cvg <- score <- mspe <- pct <- matrix(0, nrow = length(test_subjects), ncol = 4)
> for (i in 1:nTestSubj) {
+   # True values
+   trueTest <- out[test_subjects[i], indexTest]
+ 
+   # Sketching predictions for storm i
+   sketchPreds <- sketching$predictions[[i]][2, ]
+   sketchLower <- sketching$predictions[[i]][1, ]
+   sketchUpper <- sketching$predictions[[i]][3, ]
+ 
+   # BASS predictions for storm i
+   bassPreds <- bass$preds[i, ]
+   bassLower <- bass$lower[i, ]
+   bassUpper <- bass$upper[i, ]
+ 
+   # BART predictions for storm i
+   bartPreds <- bart$preds[((i - 1) * nTest + 1):(i * nTest)]
+   bartLower <- bart$lower[((i - 1) * nTest + 1):(i * nTest)]
+   bartUpper <- bart$upper[((i - 1) * nTest + 1):(i * nTest)]
+   
+   # Length
+   lengthSketch <- mean(sketchUpper - sketchLower)
+   lengthNNGP <- mean(nngp$upper - nngp$lower)
+   lengthBass <- mean(bassUpper - bassLower)
+   lengthBart <- mean(bartUpper - bartLower)
+   length[i, ] <- c(lengthSketch, lengthNNGP, lengthBass, lengthBart)
+ 
+   # Coverage
+   cvgSketch <- mean(sketchUpper > trueTest & sketchLower < trueTest)
+   cvgNNGP <- mean(nngp$upper > trueTest & nngp$lower < trueTest)
+   cvgBass <- mean(bassUpper > trueTest & bassLower < trueTest)
+   cvgBart <- mean(bartUpper > trueTest & bartLower < trueTest)
+   cvg[i, ] <- c(cvgSketch, cvgNNGP, cvgBass, cvgBart)
+ 
+   # MSPE
+   mspeSketch <- mean((sketchPreds - trueTest)^2)
+   mspeNNGP <- mean((nngp$preds - trueTest)^2)
+   mspeBass <- mean((bassPreds - trueTest)^2)
+   mspeBart <- mean((bartPreds - trueTest)^2)
+   mspe[i, ] <- c(mspeSketch, mspeNNGP, mspeBass, mspeBart)
+ 
+   # Interval score
+   a <- 0.05
+   scoreSketch <- mean( (sketchUpper - sketchLower) + 
+                  2/a * (sketchLower - trueTest) * 
+                  (trueTest < sketchLower) + 
+                  2/a * (trueTest - sketchUpper) * 
+                  (trueTest > sketchUpper) ) 
+   scoreNNGP <- mean( (nngp$upper - nngp$lower) +
+ 		   2/a * (nngp$lower - trueTest) *
+ 		   (trueTest < nngp$lower) + 
+ 		   2/a * (trueTest - nngp$upper) * 
+ 		   (trueTest > nngp$upper) )
+   scoreBass <- mean( (bassUpper - bassLower) +
+ 		   2/a * (bassLower - trueTest) *
+ 		   (trueTest < bassLower) + 
+ 		   2/a * (trueTest - bassUpper) *
+ 		   (trueTest > bassUpper) )
+   scoreBart <- mean( (bartUpper - bartLower) +
+ 		   2/a * (bartLower - trueTest) *
+ 		   (trueTest < bartLower) + 
+ 		   2/a * (trueTest - bartUpper) * 
+ 		   (trueTest > bartUpper) )
+   score[i, ] <- c(scoreSketch, scoreNNGP, scoreBass, scoreBart)
+ 
+   # Over/under 4 feet
+   trueFeet <- trueTest * 3.28084
+   trueOver <- trueFeet >= 4.0
+ 
+   sketchFeet <- sketchPreds * 3.28084
+   sketchOver <- sketchFeet >= 4.0
+   sketchPct <- mean(trueOver == sketchOver)
+ 
+   nngpFeet <- nngp$preds * 3.28084
+   nngpOver <- nngpFeet >= 4.0
+   nngpPct <- mean(trueOver == nngpOver)
+ 
+   bassFeet <- bassPreds * 3.28084
+   bassOver <- bassFeet >= 4.0
+   bassPct <- mean(trueOver == bassOver)
+   
+   bartFeet <- bartPreds * 3.28084
+   bartOver <- bartFeet >= 4.0
+   bartPct <- mean(trueOver == bartOver)
+ 
+   pct[i, ] <- c(sketchPct, nngpPct, bassPct, bartPct)
+ }
> 
> length <- apply(length, 2, mean)
> cvg <- apply(cvg, 2, mean)
> mspe <- apply(mspe, 2, mean)
> score <- apply(score, 2, mean)
> pct <- 1 - apply(pct, 2, mean)
> 
> # Parameter estimates
> 
> sketchParams
         sigma2      tau2       beta
mean  0.5658447 0.2105856 -0.7211194
lower 0.5347267 0.1376157 -0.7226132
upper 0.6398643 0.2410073 -0.7196398
> nngp$params
       sigma.sq     tau.sq       phi       beta
mean  0.5907481 0.02903578  545.6673 -0.2652615
lower 0.4481655 0.01236331  289.6346 -0.3830290
upper 0.6894370 0.06997875 1754.9202 -0.1411634
> 
> # Predictive diagnostics (our approach vs BART)
> preds_df <- data.frame(cvg = cvg, 
+ 		       length = length, 
+ 		       mspe = mspe, 
+ 		       score = score, 
+ 		       pct = pct)
> rownames(preds_df) <- c("Sketching", "NNGP", "BASS", "BART")
> preds_df
                cvg     length      mspe     score        pct
Sketching 0.8233400  2.9582774 1.1968028  6.464729 0.08068410
NNGP      0.1843058  0.5850738 0.8333860 20.452963 0.08651911
BASS      0.9702213 18.0509723 0.8908616 18.058104 0.07162978
BART      0.8303823  2.5080401 0.7220642  5.965584 0.07645875
> 
> # Also make sure that acceptance rates are satisfactory
> sketching$acc
 sigma2    tau2 
0.21296 0.25040 
> 
> rm(list=ls())
> gc()
         used (Mb) gc trigger    (Mb)   max used    (Mb)
Ncells 348470 18.7     819374    43.8     819374    43.8
Vcells 627834  4.8 2851248825 21753.4 2898833657 22116.4
> if (file.exists(".RData")) {
+   remove(".RData")
+ }
Warning message:
In remove(".RData") : object '.RData' not found
> 
> proc.time()
   user  system elapsed 
137.454  12.002 149.707 
