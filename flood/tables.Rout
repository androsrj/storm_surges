
R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> sketching <- readRDS("results/flood_results_sketching.RDS")
> bart <- readRDS("results/flood_results_bart.RDS")
> nngp <- readRDS("results/flood_results_nngp.RDS")
> data_split <- readRDS("results/data_split.RDS")
> indexTest <- data_split[[2]]
> nTest <- length(indexTest)
> load("data/flood_data.RData")
> test_subjects <- 1:2
> 
> 
> # Parameter estimates
> sigma2 <- c(sketching$means['sigma2'], 
+             sketching$lower[1],
+             sketching$upper[1])
> tau2 <- c(sketching$means['tau2'], 
+           sketching$lower[2],
+           sketching$upper[2])
> beta <- c(sketching$means['beta7'], 
+           sketching$lower[9],
+           sketching$upper[9])
> sketchParams <- data.frame(sigma2, tau2, beta)
> rownames(sketchParams) <- c("mean", "lower", "upper")
> 
> means <- apply(sapply(test_subjects, function(i) apply(nngp$obj[[i]]$p.theta.samples, 2, mean)), 1, mean)
> lowers <- apply(sapply(test_subjects, function(i) apply(nngp$obj[[i]]$p.theta.samples, 2, quantile, .025)), 1, mean)
> uppers <- apply(sapply(test_subjects, function(i) apply(nngp$obj[[i]]$p.theta.samples, 2, quantile, .975)), 1, mean)
> betas <- sapply(test_subjects, function(i) mean(nngp$obj[[i]]$p.beta.samples[ ,2]))
> nngpParams <- as.data.frame(rbind(means, lowers, uppers))
> nngpParams <- data.frame(nngpParams, beta = c(mean(betas), quantile(betas, c(.025, .975))))
> rownames(nngpParams) <- c("mean", "lower", "upper")
> 
> 
> length <- cvg <- score <- mspe <- pct <- matrix(0, nrow = length(test_subjects), ncol = 3)
> for (i in test_subjects) {
+   # True values
+   trueTest <- out[i, indexTest]
+   
+   # BART predictions
+   bartPreds <- bart[[i]]$yhat.test.mean
+   bartCI <- apply(bart[[i]]$yhat.test, 2, quantile, c(0.025, 0.975))
+   bartLower <- bartCI[1, ]
+   bartUpper <- bartCI[2, ]
+ 
+   # NNGP predictions
+   nngpPreds <- apply(nngp$preds[[i]]$p.y.0, 1, mean)
+   nngpLower <- apply(nngp$preds[[i]]$p.y.0, 1, quantile, .025)
+   nngpUpper <- apply(nngp$preds[[i]]$p.y.0, 1, quantile, .975)
+ 
+   # Sketching predictions
+   sketchPreds <- sketching$predictions[[i]][2, ]
+   sketchLower <- sketching$predictions[[i]][1, ]
+   sketchUpper <- sketching$predictions[[i]][3, ]
+   
+   # Length
+   lengthSketch <- mean(sketchUpper - sketchLower)
+   lengthBart <- mean(bartUpper - bartLower)
+   lengthNNGP <- mean(nngpUpper - nngpLower)
+   length[i, ] <- c(lengthSketch, lengthBart, lengthNNGP)
+ 
+   # Coverage
+   cvgSketch <- mean(sketchUpper > trueTest & sketchLower < trueTest)
+   cvgBart <- mean(bartUpper > trueTest & bartLower < trueTest)
+   cvgNNGP <- mean(nngpUpper > trueTest & nngpLower < trueTest)
+   cvg[i, ] <- c(cvgSketch, cvgBart, cvgNNGP)
+ 
+   # MSPE
+   mspeSketch <- mean((sketchPreds - trueTest)^2)
+   mspeBart <- mean((bartPreds - trueTest)^2)
+   mspeNNGP <- mean((nngpPreds - trueTest)^2)
+   mspe[i, ] <- c(mspeSketch, mspeBart, mspeNNGP)
+ 
+   # Interval score
+   a <- 0.05
+   scoreSketch <- mean( (sketchUpper - sketchLower) + 
+                  2/a * (sketchLower - trueTest) * 
+                  (trueTest < sketchLower) + 
+                  2/a * (trueTest - sketchUpper) * 
+                  (trueTest > sketchUpper) ) 
+   scoreBart <- mean( (bartUpper - bartLower) +
+ 		   2/a * (bartLower - trueTest) *
+ 		   (trueTest < bartLower) + 
+ 		   2/a * (trueTest - bartUpper) * 
+ 		   (trueTest > bartUpper) )
+   scoreNNGP <- mean( (nngpUpper - nngpLower) +
+ 		   2/a * (nngpLower - trueTest) *
+ 		   (trueTest < nngpLower) + 
+ 		   2/a * (trueTest - nngpUpper) * 
+ 		   (trueTest > nngpUpper) )
+   score[i, ] <- c(scoreSketch, scoreBart, scoreNNGP)
+ 
+   # Over/under 4 feet
+   trueFeet <- trueTest * 3.28084
+   trueOver <- trueFeet >= 4.0
+ 
+   sketchFeet <- sketchPreds * 3.28084
+   sketchOver <- sketchFeet >= 4.0
+   sketchPct <- mean(trueOver == sketchOver)
+   
+   bartFeet <- bartPreds * 3.28084
+   bartOver <- bartFeet >= 4.0
+   bartPct <- mean(trueOver == bartOver)
+ 
+   nngpFeet <- nngpPreds * 3.28084
+   nngpOver <- nngpFeet >= 4.0
+   nngpPct <- mean(trueOver == nngpOver)
+   
+   pct[i, ] <- c(sketchPct, bartPct, nngpPct)
+ }
> 
> length <- apply(length, 2, mean)
> cvg <- apply(cvg, 2, mean)
> mspe <- apply(mspe, 2, mean)
> score <- apply(score, 2, mean)
> pct <- 1 - apply(pct, 2, mean)
> 
> # Parameter estimates
> 
> sketchParams
         sigma2       tau2       beta
mean  0.7243827 0.14687445 -0.7224559
lower 0.6980095 0.09365462 -0.7235420
upper 0.7783136 0.17270240 -0.7213290
> nngpParams
        sigma.sq     tau.sq      phi       beta
mean  18.4554003 0.12682755 5.395149 -0.2048020
lower  0.5664758 0.08356595 4.738585 -0.2483827
upper 24.1237025 0.54343675 6.190236 -0.1612213
> 
> # Predictive diagnostics (our approach vs BART)
> preds_df <- data.frame(cvg = cvg, 
+ 		       length = length, 
+ 		       mspe = mspe, 
+ 		       score = score, 
+ 		       pct = pct)
> rownames(preds_df) <- c("Sketching", "BART", "NNGP")
> preds_df
                 cvg     length      mspe     score        pct
Sketching 0.95481928 3.64033688 0.7948180  4.313788 0.08433735
BART      0.07931727 0.07757381 0.5509792 19.863883 0.06726908
NNGP      0.94477912 1.93758447 0.1881647  2.650610 0.03915663
> 
> # Also make sure that acceptance rates are satisfactory
> sketching$acc
 sigma2    tau2 
0.30868 0.23544 
> 
> proc.time()
   user  system elapsed 
 23.091   2.038  25.193 
