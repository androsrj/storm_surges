
R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> sketching <- readRDS("results/flood_results_sketching.RDS")
> nngp <- readRDS("results/flood_results_nngp.RDS")
> bass <- readRDS("results/flood_results_bass.RDS")
> bart <- readRDS("results/flood_results_bart.RDS")
> indexTest <- readRDS("results/test_points.RDS")
> nTest <- length(indexTest)
> test_subjects <- 6:10
> nTestSubj <- length(test_subjects)
> load("data/flood_data.RData")
> n <- nrow(coords)
> 
> # Parameter estimates
> sigma2 <- c(sketching$means['sigma2'], 
+             sketching$lower[1],
+             sketching$upper[1])
> tau2 <- c(sketching$means['tau2'], 
+           sketching$lower[2],
+           sketching$upper[2])
> beta <- c(sketching$means['beta7'], 
+           sketching$lower[9],
+           sketching$upper[9])
> sketchParams <- data.frame(sigma2, tau2, beta)
> rownames(sketchParams) <- c("mean", "lower", "upper")
> 
> # Calculate all predictive diagnostics
> length <- cvg <- score <- mspe <- pct <- matrix(0, nrow = length(test_subjects), ncol = 4)
> for (i in 1:nTestSubj) {
+   # True values
+   trueTest <- out[test_subjects[i], indexTest]
+   ind <- which(trueTest > 8/3.28084)
+   trueTest <- trueTest[ind]
+ 
+   # Sketching predictions for storm i
+   sketchPreds <- sketching$predictions[[i]][2, ind]
+   sketchLower <- sketching$predictions[[i]][1, ind]
+   sketchUpper <- sketching$predictions[[i]][3, ind]
+ 
+   # BASS predictions for storm i
+   bassPreds <- bass$preds[i, ind]
+   bassLower <- bass$lower[i, ind]
+   bassUpper <- bass$upper[i, ind]
+ 
+   # BART predictions for storm i
+   bartPreds <- bart$preds[((i - 1) * nTest + 1):(i * nTest)][ind]
+   bartLower <- bart$lower[((i - 1) * nTest + 1):(i * nTest)][ind]
+   bartUpper <- bart$upper[((i - 1) * nTest + 1):(i * nTest)][ind]
+ 
+   nngpPreds <- nngp$preds[ind]
+   nngpLower <- nngp$lower[ind]
+   nngpUpper <- nngp$upper[ind]
+   
+   # Length
+   lengthSketch <- mean(sketchUpper - sketchLower)
+   lengthNNGP <- mean(nngpUpper - nngpLower)
+   lengthBass <- mean(bassUpper - bassLower)
+   lengthBart <- mean(bartUpper - bartLower)
+   length[i, ] <- c(lengthSketch, lengthNNGP, lengthBass, lengthBart)
+ 
+   # Coverage
+   cvgSketch <- mean(sketchUpper > trueTest & sketchLower < trueTest)
+   cvgNNGP <- mean(nngpUpper > trueTest & nngpLower < trueTest)
+   cvgBass <- mean(bassUpper > trueTest & bassLower < trueTest)
+   cvgBart <- mean(bartUpper > trueTest & bartLower < trueTest)
+   cvg[i, ] <- c(cvgSketch, cvgNNGP, cvgBass, cvgBart)
+ 
+   # MSPE
+   mspeSketch <- mean((sketchPreds - trueTest)^2)
+   mspeNNGP <- mean((nngpPreds - trueTest)^2)
+   mspeBass <- mean((bassPreds - trueTest)^2)
+   mspeBart <- mean((bartPreds - trueTest)^2)
+   mspe[i, ] <- c(mspeSketch, mspeNNGP, mspeBass, mspeBart)
+ 
+   # Interval score
+   a <- 0.05
+   scoreSketch <- mean( (sketchUpper - sketchLower) + 
+                  2/a * (sketchLower - trueTest) * 
+                  (trueTest < sketchLower) + 
+                  2/a * (trueTest - sketchUpper) * 
+                  (trueTest > sketchUpper) ) 
+   scoreNNGP <- mean( (nngpUpper - nngpLower) +
+ 		   2/a * (nngpLower - trueTest) *
+ 		   (trueTest < nngpLower) + 
+ 		   2/a * (trueTest - nngpUpper) * 
+ 		   (trueTest > nngpUpper) )
+   scoreBass <- mean( (bassUpper - bassLower) +
+ 		   2/a * (bassLower - trueTest) *
+ 		   (trueTest < bassLower) + 
+ 		   2/a * (trueTest - bassUpper) *
+ 		   (trueTest > bassUpper) )
+   scoreBart <- mean( (bartUpper - bartLower) +
+ 		   2/a * (bartLower - trueTest) *
+ 		   (trueTest < bartLower) + 
+ 		   2/a * (trueTest - bartUpper) * 
+ 		   (trueTest > bartUpper) )
+   score[i, ] <- c(scoreSketch, scoreNNGP, scoreBass, scoreBart)
+ 
+   # Over/under 4 feet
+   trueFeet <- trueTest * 3.28084
+   trueOver <- trueFeet >= 4.0
+ 
+   sketchFeet <- sketchPreds * 3.28084
+   sketchOver <- sketchFeet >= 4.0
+   sketchPct <- mean(trueOver == sketchOver)
+ 
+   nngpFeet <- nngpPreds * 3.28084
+   nngpOver <- nngpFeet >= 4.0
+   nngpPct <- mean(trueOver == nngpOver)
+ 
+   bassFeet <- bassPreds * 3.28084
+   bassOver <- bassFeet >= 4.0
+   bassPct <- mean(trueOver == bassOver)
+   
+   bartFeet <- bartPreds * 3.28084
+   bartOver <- bartFeet >= 4.0
+   bartPct <- mean(trueOver == bartOver)
+ 
+   pct[i, ] <- c(sketchPct, nngpPct, bassPct, bartPct)
+ }
> 
> length <- apply(length, 2, mean)
> cvg <- apply(cvg, 2, mean)
> mspe <- apply(mspe, 2, mean)
> score <- apply(score, 2, mean)
> pct <- 1 - apply(pct, 2, mean)
> 
> # Parameter estimates
> 
> sketchParams
         sigma2      tau2       beta
mean  0.5425077 0.2145407 -0.7259086
lower 0.5118483 0.1398770 -0.7274297
upper 0.6187153 0.2451507 -0.7243911
> nngp$params
       sigma.sq     tau.sq       phi       beta
mean  0.5907481 0.02903578  545.6673 -0.2652615
lower 0.4481655 0.01236331  289.6346 -0.3830290
upper 0.6894370 0.06997875 1754.9202 -0.1411634
> 
> # Predictive diagnostics (our approach vs BART)
> preds_df <- data.frame(cvg = cvg, 
+ 		       length = length, 
+ 		       mspe = mspe, 
+ 		       score = score, 
+ 		       pct = pct)
> rownames(preds_df) <- c("Sketching", "NNGP", "BASS", "BART")
> preds_df
                cvg     length      mspe     score         pct
Sketching 0.8478915  3.3940182 1.3509239  5.933872 0.011271401
NNGP      0.1414623  0.5845672 0.7726245 20.566623 0.000000000
BASS      1.0000000 20.6100882 0.7834289 20.610088 0.000000000
BART      0.8621595  2.5430492 0.6345226  5.127664 0.007971201
> 
> # Also make sure that acceptance rates are satisfactory
> sketching$acc
 sigma2    tau2 
0.21128 0.26000 
> 
> rm(list=ls())
> gc()
         used (Mb) gc trigger   (Mb)  max used   (Mb)
Ncells 347711 18.6     666002   35.6    666002   35.6
Vcells 626635  4.8  193249936 1474.4 200328789 1528.4
> if (file.exists(".RData")) {
+   remove(".RData")
+ }
Warning message:
In remove(".RData") : object '.RData' not found
> 
> proc.time()
   user  system elapsed 
  6.202   0.711   6.902 
