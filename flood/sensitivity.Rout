
R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> # Clear environment and free unused memory
> rm(list = ls())
> gc()
         used (Mb) gc trigger   (Mb)  max used   (Mb)
Ncells 275600 14.8     787428   42.1    350000   18.7
Vcells 462938  3.6  233131938 1778.7 250235040 1909.2
> 
> # SOURCES
> source("../mcmc_functions/mcmc.R") # Metropolis-Gibbs Sampler
> source("../mcmc_functions/priors.R")
> source("../mcmc_functions/jacobians.R")
> source("../mcmc_functions/likelihood.R")
> source("../mcmc_functions/posterior.R")
> source("../other_functions/parallel_functions.R") # Parallel wrapper functions
> source("../other_functions/helper_functions.R") # Other misc functions (not part of MCMC)
> 
> # Libraries
> library(parallel) # For parallel computation
> library(doParallel) # For parallel computation
Loading required package: foreach
Loading required package: iterators
> library(foreach) # For parallel computation
> library(mvtnorm)
> library(fields)
Loading required package: spam
Spam version 2.9-1 (2022-08-07) is loaded.
Type 'help( Spam)' or 'demo( spam)' for a short introduction 
and overview of this package.
Help for individual functions is also obtained by adding the
suffix '.spam' to the function name, e.g. 'help( chol.spam)'.

Attaching package: ‘spam’

The following objects are masked from ‘package:mvtnorm’:

    rmvnorm, rmvt

The following objects are masked from ‘package:base’:

    backsolve, forwardsolve

Loading required package: viridis
Loading required package: viridisLite

Try help(fields) to get started.
> library(MBA)
> library(anticlust) # for balanced clustering
> library(splitTools) # for stratified splitting
> 
> # Read in
> load("data/flood_data.RData")
> 
> # Clusters and seed
> nCores <- 2
> totalCores <- 10
> mySeed <- 1997
> test_subjects <- 11:30
> 
> # Randomly sample indices for train and test data
> n <- nrow(coords)
> pctTest <- 0.02
> nTest <- floor(pctTest * n)
> set.seed(mySeed)
> indexTest <- sort(sample(1:n, nTest))
> saveRDS(indexTest, "results/test_points.RDS")
> 
> # Divide using train and test indices
> storms <- 1:5
> Y <- lapply(storms, \(i) out[i, ])
> X <- lapply(storms, \(i) {
+   Xintercept <- rep(1, n)
+   Xstorm <- matrix(rep(unlist(inputs[i, ]), n), ncol = 5, byrow = TRUE)
+   Xelev <- coords$elev_meters
+   X <- cbind(Xintercept, Xstorm, Xelev)
+   colnames(X) <- c("int", colnames(inputs), "elev")
+   return(X)
+ })
> S <- as.matrix(coords[ , 1:2])
> D <- rdist(S)
> 
> YTest <- lapply(test_subjects, \(i) out[i, indexTest])
> XTest <- lapply(test_subjects, \(i) {
+   Xintercept <- rep(1, nTest)
+   Xstorm <- matrix(rep(unlist(inputs[i, ]), nTest), ncol = 5, byrow = TRUE)
+   Xelev <- coords$elev_meters[indexTest]
+   X <- cbind(Xintercept, Xstorm, Xelev)
+   colnames(X) <- c("int", colnames(inputs), "elev")
+   return(X)
+ })
> STest <- as.matrix(coords[indexTest, 1:2])
> DTest <- rdist(STest)
> 
> 
> # Sketching
> thetaVals <- seq(10^4, 10^5, length = totalCores)
> model <- "full_gp"
> mProp <- 0.01
> propSD <- c(0.03, 0.14)
> nSubj <- length(storms)
> nTestSubj <- length(test_subjects)
> 
> cl <- makeCluster(nCores)
> registerDoParallel(cl)
> strt <- Sys.time()
> set.seed(mySeed)
> obj <- foreach(i = 1:totalCores, .packages = "mvtnorm") %dopar% sketching_parallel(i)  
> final.time <- Sys.time() - strt 
> stopCluster(cl)
> 
> flood_results_sketching <- wasserstein(results = obj, time = final.time)
> saveRDS(flood_results_sketching, "results/flood_results_sens.RDS")
> saveRDS(obj, "results/params_sens.RDS")
> 
> if (file.exists(".RData")) {
+   file.remove(".RData")
+ }
[1] TRUE
> gc()
             used    (Mb) gc trigger    (Mb)   max used    (Mb)
Ncells    1977746   105.7    3045048   162.7    3045048   162.7
Vcells 2877153778 21951.0 3856603554 29423.6 2878571763 21961.8
> 
> proc.time()
      user     system    elapsed 
   153.126     29.356 192288.723 
