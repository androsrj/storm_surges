
R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> # Clear environment and free unused memory
> rm(list = ls())
> gc()
         used (Mb) gc trigger   (Mb)  max used   (Mb)
Ncells 275750 14.8     505371   27.0    505371   27.0
Vcells 462712  3.6  530294460 4045.9 551870464 4210.5
> 
> # SOURCES
> source("../mcmc_functions/mcmc.R") # Metropolis-Gibbs Sampler
> source("../mcmc_functions/priors.R")
> source("../mcmc_functions/jacobians.R")
> source("../mcmc_functions/likelihood.R")
> source("../mcmc_functions/posterior.R")
> source("../other_functions/parallel_functions.R") # Parallel wrapper functions
> source("../other_functions/helper_functions.R") # Other misc functions (not part of MCMC)
> 
> # Libraries
> library(parallel) # For parallel computation
> library(doParallel) # For parallel computation
Loading required package: foreach
Loading required package: iterators
> library(foreach) # For parallel computation
> library(mvtnorm)
> library(fields)
Loading required package: spam
Spam version 2.9-1 (2022-08-07) is loaded.
Type 'help( Spam)' or 'demo( spam)' for a short introduction 
and overview of this package.
Help for individual functions is also obtained by adding the
suffix '.spam' to the function name, e.g. 'help( chol.spam)'.

Attaching package: ‘spam’

The following objects are masked from ‘package:mvtnorm’:

    rmvnorm, rmvt

The following objects are masked from ‘package:base’:

    backsolve, forwardsolve

Loading required package: viridis
Loading required package: viridisLite

Try help(fields) to get started.
> library(MBA)
> library(anticlust) # for balanced clustering
> library(splitTools) # for stratified splitting
> 
> # Read in
> load("data/flood_data.RData")
> 
> # Clusters and seed
> nCores <- 2
> totalCores <- 10
> mySeed <- 1997
> test_subjects <- 1:2
> 
> # Randomly sample indices for train and test data
> nObs <- nrow(coords)
> pctTrain <- 0.99
> n <- nTrain <- floor(pctTrain * nObs)
> nTest <- ceiling((1 - pctTrain) * nObs)
> set.seed(mySeed)
> indexTrain <- sort(sample(1:nObs, nTrain))
> indexTest <- sort(setdiff(1:nObs, indexTrain))
> saveRDS(list(indexTrain, indexTest), "results/data_split.RDS")
> 
> # Divide using train and test indices
> storms <- 1:10
> Y <- lapply(storms, \(i) out[i, indexTrain])
> X <- lapply(storms, \(i) {
+   Xintercept <- rep(1, nTrain)
+   Xstorm <- matrix(rep(unlist(inputs[i, ]), nTrain), ncol = 5, byrow = TRUE)
+   Xelev <- coords$elev_meters[indexTrain]
+   X <- cbind(Xintercept, Xstorm, Xelev)
+   colnames(X) <- c("int", colnames(inputs), "elev")
+   return(X)
+ })
> S <- as.matrix(coords[indexTrain, 1:2])
> D <- rdist(S)
> 
> YTest <- lapply(storms, \(i) out[i, indexTest])
> XTest <- lapply(storms, \(i) {
+   Xintercept <- rep(1, nTest)
+   Xstorm <- matrix(rep(unlist(inputs[i, ]), nTest), ncol = 5, byrow = TRUE)
+   Xelev <- coords$elev_meters[indexTest]
+   X <- cbind(Xintercept, Xstorm, Xelev)
+   colnames(X) <- c("int", colnames(inputs), "elev")
+   return(X)
+ })
> STest <- as.matrix(coords[indexTest, 1:2])
> DTest <- rdist(STest)
> 
> 
> # Sketching
> thetaVals <- seq(10^5, 10^6, length = totalCores)
> model <- "full_gp"
> mProp <- 0.01
> propSD <- c(0.01, 0.14)
> nSubj <- length(storms)
> 
> cl <- makeCluster(nCores)
> registerDoParallel(cl)
> strt <- Sys.time()
> set.seed(mySeed)
> obj <- foreach(i = 1:totalCores, .packages = "mvtnorm") %dopar% sketching_parallel(i)  
> final.time <- Sys.time() - strt 
> stopCluster(cl)
> if (file.exists(".RData")) {
+   file.remove(".RData")
+ }
[1] TRUE
> gc()
             used    (Mb) gc trigger    (Mb)   max used    (Mb)
Ncells    1974784   105.5    3385965   180.9    3385965   180.9
Vcells 2639457075 20137.5 3788526646 28904.2 2640082696 20142.3
> flood_results_sketching <- wasserstein(results = obj, time = final.time)
> saveRDS(flood_results_sketching, paste0("results/flood_results_sketching.RDS"))
> 
> 
> 
> 
> 
> 
> 
> 
> 
> # D&C, subdomain split
> #indexSubd <- balanced_clustering(STrain, totalCores)
> #subsetsX <- lapply(1:totalCores, function(k) { 
> #  lapply(storms, function(s) XTrain[[s]][which(indexSubd == k), ])
> #  })
> #subsetsY <- lapply(1:totalCores, function(k) { 
> #  lapply(storms, function(s) YTrain[[s]][which(indexSubd == k)])
> #})
> #subsetsD <- lapply(1:totalCores, function(k) DTrain[which(indexSubd == k), which(indexSubd == k)])
> #
> #cl <- makeCluster(nCores)
> #registerDoParallel(cl)
> #strt <- Sys.time()
> #set.seed(mySeed)
> #obj <- foreach(i = 1:totalCores, .packages = "mvtnorm") %dopar% subdomains_parallel(i)  
> #final.time <- Sys.time() - strt 
> #stopCluster(cl)
> #if (file.exists(".RData")) {
> #  file.remove(".RData")
> #}
> #gc()
> #flood_results_subdomains <- wasserstein(nChains = totalCores, method = "subdomains")
> #saveRDS(flood_results_subdomains, paste0("results/flood_results_subdomains.RDS"))
> 
> 
> 
> # D&C, stratified split
> #indexStrat <- list2Vec(partition(indexSubd, p = rep(1/nCores, totalCores)))
> #subsetsX <- lapply(1:totalCores, function(k) { 
> #  lapply(storms, function(s) XTrain[[s]][which(indexStrat == k), ])
> #})
> #subsetsY <- lapply(1:totalCores, function(k) { 
> #  lapply(storms, function(s) YTrain[[s]][which(indexStrat == k)])
> #})
> #subsetsD <- lapply(1:totalCores, function(k) DTrain[which(indexStrat == k), which(indexStrat == k)])
> #
> #cl <- makeCluster(nCores)
> #registerDoParallel(cl)
> #strt <- Sys.time()
> #set.seed(mySeed)
> #obj <- foreach(i = 1:totalCores, .packages = "mvtnorm") %dopar% stratified_parallel(i)  
> #final.time <- Sys.time() - strt 
> #stopCluster(cl)
> #if (file.exists(".RData")) {
> #  file.remove(".RData")
> #}
> #gc()
> #flood_results_stratified <- wasserstein(nChains = totalCores, method = "stratified")
> #saveRDS(flood_results_stratified, paste0("results/flood_results_stratified.RDS"))
> 
> 
> 
> proc.time()
    user   system  elapsed 
  94.983   25.387 7904.238 
