z[[2]][[1]] = c("Saturday")
z[[2]][[2]] = c("Sunday")
z[[3]] = list(seq(0.1 , 0.2 , length = 10))
names(z) = c("weekdays", "weekend", "sequence")
z
# Accessing elements
z$weekdays[[5]]
z$weekend[[2]]
z$sequence[[1]][5]
# If-else statement
x = 10
if (x %% 2 == 0) {
y = runif(n = 1, min = 0, max = 1)
} else {
y = runif(n = 1, min = 2, max = 4)
}
y
ifelse(x %% 2 == 0, runif(1, 0, 1), runif(1, 2, 4))
x = 15
if (x %% 2 == 0) {
y = runif(n = 1, min = 0, max = 1)
} else if (x %% 3 == 0) {
y = 0
} else {
y = runif(n = 1, min = 2, max = 4)
}
y
# Writing loops
count = 1 # Initialize count
z = NULL
while (count <= 15)
# The task within while loop is executed until
# count becomes 16
{
# Creating a vector
x = c(1:count)
# Storing 1st element of a random permutation
y = sample(x)[1]
# Storing all the 1st elements
# of each random permutation
z = c(z, y)
# Increasing the count
count = count + 1
# Extremely important step to run the loop
}
z
for (i in 1:10) {
if(i %% 2 == 0) {
print(i)
} else {
print(0)
}
}
# Fibonacci sequence
f = NULL
f[1] = 1
f[2] = 1
for (j in 3:20) {
f[j] = f[j - 1] + f[j - 2]
}
f
# sapply and lapply
sapply (1:5 , function(i) {
mean(runif(10 , min = i, max = i + 1))
})
lapply (1:5 , function(i) {
mean(runif(10 , min = i, max = i + 1))
})
?CO2
head(CO2)
is.data.frame(CO2)
CO2$Plant
CO2$Type
CO2$Treatment
CO2$conc
CO2$uptake
# Extract the update values for which Plant equals Qn1
CO2$uptake[CO2$Plant == "Qn1"]
# Extract the update values for which Plant equals Qn1 and Type equals Quebec. Also calculate the mean
CO2$uptake[(CO2$Plant == "Qn1") & (CO2$Type == "Quebec")]
mean(CO2$uptake[(CO2$Plant == "Qn1") & (CO2$Type == "Quebec")])
# Calculate how many uptake values are there which are less than 25
sum(ifelse(CO2$uptake <= 25, 1, 0))
# For loop
count1 = NULL
for(k in 1:length(CO2$uptake)) {
if(CO2$Treatment[k] == "chilled" & CO2$uptake[k] <= 25) {
count1[k] = 1
} else {
count1[k] = 0
}
}
sum(count1)
# While loop
k = 1
count2 = NULL
while (k <= length(CO2$uptake)) {
if(CO2$Treatment[k] == "chilled" & CO2$uptake[k] <= 25) {
count2[k] = 1
} else {
count2[k] = 0
}
k = k + 1
}
sum(count2)
# Calculate the average distance taken to stop given the speed of the cars using lapply and sapply
speed = unique(cars$speed)
lapply(1:length(speed), function(h){
x = mean(cars$dist[cars$speed == speed[h]])
return(x)
})
speed = unique(cars$speed)
sapply(1:length(speed), function(h){
y = mean(cars$dist[cars$speed == speed[h]])
return(y)
})
# Writing simple functions
average.sd = function(n) {
# Check if n >= 10
if(n >= 10) {
x = sample(1:n, size = 10, replace = FALSE)
} else{
# if false generate error message
stop("Enter number more than 10")
}
# Calculate mean and standard deviation
y1 = mean(x)
y2 = var(x)
y = c(y1, y2)
return(y) # Return statement
}
average.sd(4) # Function calls
average.sd(11)
average.sd(20)
# Function body
f = function(x) {
return(x^2 - 3*x + 4)
}
# Generate x values to evaluate the function
xval = seq(0, 1, length = 20)
yval = f(x = xval) # Function call
# Plot the curve
plot(xval, yval, type = "l", xlab = "x", ylab = "f(x)")
# Data Visualization
# Scatter Plot
x = cars$speed
y = cars$dist
plot(x, y, col = "maroon", pch = 16, xlab = "speed", ylab = "distance",
main = "Scatter Plot of distance vs speed")
library (ggplot2)
ggplot(cars, aes(x = speed, y = dist)) + geom_point () + ggtitle (" Scatter Plot of distance vs speed ")
# Line diagram
ggplot(cars, aes(x = speed, y = dist)) + geom_line() + ggtitle("Line Diagram of distance vs speed")
# Bar Plot
# Calculate the average mpg values corresponding
# to each cylinder value
# Three categories
mpg1 = mean(mtcars$mpg[mtcars$cyl == 4])
mpg2 = mean(mtcars$mpg[mtcars$cyl == 6])
mpg3 = mean(mtcars$mpg[mtcars$cyl == 8])
barplot(c(mpg1, mpg2, mpg3) ~ c(4, 6, 8),
xlab = "mtcars$cyl",
ylab = "average mpg per cyl",
ylim = c(0, 28),
col = "maroon",  # color of the bars
width = c(5, 5, 5),  # width of the bars
space = 2, # bar spacing
main = "Barplot for average mpg vs cyl")
cyl = c(4, 6, 8)
avg.mpg = c(mpg1, mpg2, mpg3)
data = data.frame(cyl, avg.mpg)
ggplot(data, aes(y = avg.mpg , x = cyl)) +
geom_bar(position = "dodge", stat="identity") +
ggtitle("Barplot for average mpg vs cyl for mtcars") +
ylim(c(0, 28))
# Divided Bar Diagram
mpg1 = mean(mtcars$mpg[mtcars$cyl == 4])
mpg2 = mean(mtcars$mpg[mtcars$cyl == 6])
mpg3 = mean(mtcars$mpg[mtcars$cyl == 8])
disp1 = mean(mtcars$disp[mtcars$cyl == 4])
disp2 = mean(mtcars$disp[mtcars$cyl == 6])
disp3 = mean(mtcars$disp[mtcars$cyl == 8])
hp1 = mean(mtcars$hp[mtcars$cyl == 4])
hp2 = mean(mtcars$hp[mtcars$cyl == 6])
hp3 = mean(mtcars$hp[mtcars$cyl == 8])
qsec1 = mean(mtcars$qsec[mtcars$cyl == 4])
qsec2 = mean(mtcars$qsec[mtcars$cyl == 6])
qsec3 = mean(mtcars$qsec[mtcars$cyl == 8])
cyl = c(4, 6, 8)
avg.mpg = c(mpg1, mpg2, mpg3)
avg.disp = c(disp1, disp2, disp3)
avg.hp = c(hp1, hp2, hp3)
avg.qsec = c(qsec1, qsec2, qsec3)
mtcars.mat = rbind(avg.mpg, avg.disp, avg.hp, avg.qsec)
colnames(mtcars.mat) = c("4", "6", "8")
barplot(mtcars.mat,
col = c("skyblue", "deepskyblue2", "dodgerblue4", "blue"),
ylim = c(0, 650),
legend.text = rownames(mtcars.mat),
args.legend = list(x = "topleft"),
main = "Divided Barplot for mtcars")
# Multiple Bar Diagram
barplot(mtcars.mat,
col = c("skyblue", "deepskyblue2", "dodgerblue4", "blue"),
ylim = c(0, 350),
legend.text = rownames(mtcars.mat),
args.legend = list(x = "topleft"),
main = "Multiple Bardiagram for mtcars",
beside = TRUE)
# Pie Diagram
# Calculating averages
food.tobacco = mean(USPersonalExpenditure[1, ])
house.opr = mean(USPersonalExpenditure[2, ])
med.health = mean(USPersonalExpenditure[3, ])
per.care = mean(USPersonalExpenditure[4, ])
prvt.edu = mean(USPersonalExpenditure[5, ])
# Pie diagram
avg.exp = c(food.tobacco, house.opr, med.health, per.care, prvt.edu)
categories = c("food.tobacco", "household.operation", "medical.health", "personal.care", "private.education")
pie(avg.exp, labels = categories, main = "Average personal expenditures over years")
# Box plot
boxplot(mtcars$hp ~ as.factor(mtcars$cyl), col = "skyblue",
xlab = "Cylinders",
ylab = "Horse Power",
main = "Boxplot for hp by cyl for mtcars")
# Histogram
hist(faithful$eruptions, freq = FALSE,
xlab = "Eruption time",
main = "Histogram for eruptions data")
pie(avg.exp, labels = categories, main = "Average personal expenditures over years")
locs=matrix(1:5,ncol=1);vecchia_specify(locs,m=2)
library(GPvecchia)
locs=matrix(1:5,ncol=1);vecchia_specify(locs,m=2)
v=vecchia_specify(locs,m=2)
str(v)
install.packages("installr")
library(installr)
updateR()
hist(rnorm(1000))
hist(rnorm(1000, 0, 2))
hist(rnorm(1000), xlim = c(-7, 7))
hist(rnorm(1000, 0, 2), xlim = c(-7, 7))
hist(rnorm(1000, 0, 3), xlim = c(-7, 7))
hist(rnorm(1000), xlim = c(-7, 7), ylim = c(0, 175))
hist(rnorm(1000, 0, 2), xlim = c(-7, 7), ylim = c(0, 175))
hist(rnorm(1000, 0, 3), xlim = c(-7, 7), ylim = c(0, 175))
hist(rnorm(1000), xlim = c(-7, 7), ylim = c(0, 250))
hist(rnorm(1000, 0, 2), xlim = c(-7, 7), ylim = c(0, 250))
hist(rnorm(1000, 0, 3), xlim = c(-7, 7), ylim = c(0, 250))
hist(rnorm(1000), main="")
hist(rnorm(1000), main="", xlim=c(-7,7), ylim=c(0,300))
hist(rnorm(1000, 0, 2), main="", xlim=c(-7,7), ylim=c(0,300))
hist(rnorm(1000, 0, 5), main="", xlim=c(-7,7), ylim=c(0,300))
hist(rnorm(1000, 0, 3), main="", xlim=c(-7,7), ylim=c(0,300))
hist(rnorm(1000), main="", xlim=c(-7,7), ylim=c(0,300))
hist(rnorm(1000), main="", xlim=c(-7,7), ylim=c(0,300), breaks=20)
hist(rnorm(1000, 0, 2), main="", xlim=c(-7,7), ylim=c(0,300), breaks=20)
hist(rnorm(1000, 0, 3), main="", xlim=c(-7,7), ylim=c(0,300), breaks=20)
hist(rnorm(1000), main="", xlim=c(-7,7), ylim=c(0,300), breaks=20)
hist(rnorm(1000, 0, 2), main="", xlim=c(-7,7), ylim=c(0,300), breaks=20)
hist(rnorm(1000, 0, 3), main="", xlim=c(-7,7), ylim=c(0,300), breaks=20)
hist(rnorm(1000), main="", xlim=c(-7,7), ylim=c(0,200), breaks=20)
hist(rnorm(1000, 0, 2), main="", xlim=c(-7,7), ylim=c(0,200), breaks=20)
hist(rnorm(1000, 0, 3), main="", xlim=c(-7,7), ylim=c(0,200), breaks=20)
hist(rnorm(1000), main="", xlim=c(-7,7), ylim=c(0,220), breaks=20)
hist(rnorm(1000, 0, 2), main="", xlim=c(-7,7), ylim=c(0,220), breaks=20)
hist(rnorm(1000, 0, 3), main="", xlim=c(-7,7), ylim=c(0,220), breaks=20)
par(mfrow=c(1,3))
hist(rnorm(1000), main="Histogram A", xlim=c(-7,7), ylim=c(0,220), breaks=20)
hist(rnorm(1000, 0, 2), main="Histogram B", xlim=c(-7,7), ylim=c(0,220), breaks=20)
hist(rnorm(1000, 0, 3), main="Histogram C", xlim=c(-7,7), ylim=c(0,220), breaks=20)
hist(rnorm(1000), main="Histogram A", xlim=c(-7,7), ylim=c(0,220), xlab="", breaks=20)
hist(rnorm(1000, 0, 2), main="Histogram B", xlim=c(-7,7), ylim=c(0,220), xlab="", breaks=20)
hist(rnorm(1000, 0, 3), main="Histogram C", xlim=c(-7,7), ylim=c(0,220), xlab="", breaks=20)
hist(rnorm(1000), main="Histogram A", xlim=c(-7,7), ylim=c(0,220), xlab="", breaks=20)
hist(rnorm(1000, 0, 2), main="Histogram B", xlim=c(-7,7), ylim=c(0,220), xlab="", breaks=20)
hist(rnorm(1000, 0, 3), main="Histogram C", xlim=c(-7,7), ylim=c(0,220), xlab="", breaks=30)
hist(rnorm(1000), main="Histogram A", xlim=c(-7,7), ylim=c(0,220), xlab="", breaks=10)
hist(rnorm(1000, 0, 2), main="Histogram B", xlim=c(-7,7), ylim=c(0,220), xlab="", breaks=20)
hist(rnorm(1000, 0, 3), main="Histogram C", xlim=c(-7,7), ylim=c(0,220), xlab="", breaks=30)
hist(rnorm(1000), main="Histogram A", xlim=c(-8,8), ylim=c(0,220), xlab="", breaks=10)
hist(rnorm(1000, 0, 2), main="Histogram B", xlim=c(-8,8), ylim=c(0,220), xlab="", breaks=20)
hist(rnorm(1000, 0, 3), main="Histogram C", xlim=c(-8,8), ylim=c(0,220), xlab="", breaks=30)
hist(rnorm(1000), main="Histogram A", xlim=c(-8,8), ylim=c(0,220), xlab="", breaks=10)
hist(rnorm(1000, 0, 2), main="Histogram B", xlim=c(-8,8), ylim=c(0,220), xlab="", breaks=30)
hist(rnorm(1000, 0, 3), main="Histogram C", xlim=c(-8,8), ylim=c(0,220), xlab="", breaks=30)
par(mfrow=c(1,1))
hist(rnorm(1000), main="Histogram A", xlim=c(-8,8), ylim=c(0,220), xlab="", breaks=10)
hist(rnorm(1000), main="Histogram A", xlab="", breaks=10)
hist(rnorm(1000), main="Histogram A", xlab="", breaks=15)
hist(rnorm(1000), main="Histogram A", xlab="", breaks=15)
par(mfrow=c(1,3))
hist(rnorm(1000), main="Histogram A", xlim=c(-8,8), ylim=c(0,220), xlab="", breaks=10)
hist(rnorm(1000, 0, 2), main="Histogram B", xlim=c(-8,8), ylim=c(0,220), xlab="", breaks=30)
hist(rnorm(1000, 0, 3), main="Histogram C", xlim=c(-8,8), ylim=c(0,220), xlab="", breaks=30)
hist(rnorm(1000), main="Histogram A", xlim=c(-8,8), ylim=c(0,220), xlab="", breaks=10)
hist(rnorm(1000, 0, 2), main="Histogram B", xlim=c(-8,8), ylim=c(0,220), xlab="", breaks=30)
hist(rnorm(1000, 0, 3), main="Histogram C", xlim=c(-8,8), ylim=c(0,220), xlab="", breaks=30)
hist(rnorm(1000), main="Histogram A", xlim=c(-8,8), ylim=c(0,220), xlab="", breaks=10)
hist(rnorm(1000, 0, 2), main="Histogram B", xlim=c(-8,8), ylim=c(0,220), xlab="", breaks=30)
hist(rnorm(1000, 0, 3), main="Histogram C", xlim=c(-8,8), ylim=c(0,220), xlab="", breaks=30)
hist(rnorm(1000), main="Histogram A", xlim=c(-8,8), ylim=c(0,220), xlab="", breaks=10)
hist(rnorm(1000, 0, 2), main="Histogram B", xlim=c(-8,8), ylim=c(0,220), xlab="", breaks=30)
hist(rnorm(1000, 0, 3), main="Histogram C", xlim=c(-8,8), ylim=c(0,220), xlab="", breaks=30)
par(mfrow=c(1,1))
hist(rnorm(1000), main="Histogram A", xlab="", breaks=15)
hist(rnorm(1000), main="Histogram A", xlab="", breaks=15)
hist(rnorm(1000), main="Histogram A", xlab="", breaks=15)
hist(rnorm(1000), main="Histogram A", xlab="", breaks=15)
hist(rnorm(1000), main="Histogram A", xlab="", breaks=15)
hist(rnorm(1000), main="Histogram A", xlab="", breaks=15)
hist(rnorm(1000), main="Histogram A", xlab="", breaks=15)
hist(rnorm(1000), main="Histogram A", xlab="", breaks=15)
d=as.factor(c('a','b','c'))
d
reorder(d)
reorder(d, c('b','c','a'))
reorder(d, c('b','c','a'), FUN=identity())
reorder(x=d, X=c('b','c','a'), FUN=identity())
reorder(x=d, X=c('b','c','a'), FUN=identity
)
reorder(x=d, X=c('b','c','a'), FUN=identity)
d
d <- c('a', 'f', 'c', 'h')
factor(d)
factor(d, levels=c(''a', 'c', 'f', 'h''))
factor(d, levels=c('a', 'c', 'f', 'h''))
)
)
factor(d, levels=c('a', 'c', 'f', 'h''))
as.factor(d, levels=c('a', 'c', 'f', 'h''))
as.factor(d, levels=c('a', 'c', 'f', 'h'))
as.factor(d, levels = c('a', 'c', 'f', 'h'))
d
factor(d)
factor(d, levels=c('a','c','f','h'))
as.factor(d, levels=c('a','c','f','h'))
as.factor(d)
as.factor(d, levels=c('a','f','c','h'))
factor(d, levels=c('a','f','c','h'))
heights <- c(59, 61, 62, 63, 64, 65, 66, 66, 67, 68, 68, 69, 69, 70, 71, 73, 74)
boxplot(heights, horizontal=TRUE)
boxplot(heights, horizontal=TRUE, xlab="Height (inches)", xaxt='n')
axis(1, labels = 58:75)
axis(1, at = 58:75, labels = 58:75)
218*.42
nOther <- 92
.31*218
nFish <- 68
.14*218
nInv <- 30
.09*218
nBird <- 20
.04*218
nRep <- 9
nOther+nFish+nInv+nBird+nRep
nOther <- 91
gators <- c(rep("Other", nOther), rep("Fish", nFish), rep("Invert", nInv), rep("Bird", nBird), rep("Rept", nRep))
length(gators)
barplot(gators)
barplot(table(gators))
gators <- factor(gators, levels=c("Other", "Fish", "Invert", "Bird", "Rept"))
barplot(table(gators))
table(gators)
table(gators)/218
barplot(table(gators)/218)
barplot(table(gators)/218*100)
barplot(table(gators)/218*100, col="blue")
abline(h=seq(5, 45, by=5))
abline(h=seq(0, 45, by=5))
barplot(table(gators)/218*100, col="blue")
abline(h=0)
abline(h=seq(5, 45, by=5), lty=2)
barplot(table(gators)/218*100, fill="blue")
barplot(table(gators)/218*100, col="blue")
barplot(table(gators)/218*100, col="deepskyblue3")
abline(h=0)
abline(h=seq(5, 45, by=5), lty=2)
barplot(table(gators)/218*100, col="deepskyblue3", ylab = 'Percentage')
abline(h=seq(5, 45, by=5), lty=2)
abline(h=0)
heights <- c(59, 61, 62, 63, 64, 65, 66, 66, 67, 68, 68, 69, 69, 70, 71, 73, 74)
boxplot(heights, horizontal=TRUE, xlab="Height (inches)", xaxt='n')
axis(1, at = 58:75, labels = 58:75)
diet <- c("Other", "Fish", "Invert", "Bird", "Rept")
table(gators)/218*100
sum(table(gators)/218*100)
barplot(gators, col="deepskyblue3", ylab = 'Percentage')
diet <- c("Other", "Fish", "Invert", "Bird", "Rept")
pct <- c(41.74, 31.19, 13.76, 9.17, 4.13)
gators <- data.frame(diet, pct)
barplot(gators, col="deepskyblue3", ylab = 'Percentage')
barplot(as.matrix(gators), col="deepskyblue3", ylab = 'Percentage')
gators
gators <- c(rep("Other", nOther), rep("Fish", nFish), rep("Invert", nInv), rep("Bird", nBird), rep("Rept", nRep))
table(gators)/218
gators <- as.factor(gators, levels = c("Other", "Fish", "Invert", "Bird", "Rept"))
gators <- factor(gators, levels = c("Other", "Fish", "Invert", "Bird", "Rept"))
barplot(table(gators) / 218 * 100, col="deepskyblue3", ylab = 'Percentage')
abline(h=seq(5, 45, by=5), lty=2)
abline(h=0)
# Heights boxplot
heights <- c(59, 61, 62, 63, 64, 65, 66, 66, 67, 68, 68, 69, 69, 70, 71, 73, 74)
boxplot(heights, horizontal=TRUE, xlab="Height (inches)", xaxt='n')
axis(1, at = 58:75, labels = 58:75)
# Alligator diet bar plot
gators <- c(rep("Other", 91), rep("Fish", 68), rep("Invert", 30), rep("Bird", 20), rep("Rept", 9))
gators <- factor(gators, levels = c("Other", "Fish", "Invert", "Bird", "Rept"))
barplot(table(gators) / 218 * 100, col="deepskyblue3", ylab = 'Percentage')
abline(h=seq(5, 45, by=5), lty=2)
abline(h=0)
# Heights boxplot
heights <- c(59, 61, 62, 63, 64, 65, 66, 66, 67, 68, 68, 69, 69, 70, 71, 73, 74)
boxplot(heights, horizontal=TRUE, xlab="Height (inches)", xaxt='n')
axis(1, at = 58:75, labels = 58:75)
# Alligator diet bar plot
gators <- c(rep("Other", 91), rep("Fish", 68), rep("Invert", 30), rep("Bird", 20), rep("Rept", 9))
gators <- factor(gators, levels = c("Other", "Fish", "Invert", "Bird", "Rept"))
barplot(table(gators) / 218 * 100, col="deepskyblue3", ylab = 'Percentage')
abline(h=seq(5, 45, by=5), lty=2)
abline(h=0)
setwd("~/research/storm_surges/flood")
# Clear environment and free unused memory
rm(list = ls())
gc()
# Libraries
library(BayesTree)
library(fields)
# Read in
load("data/flood_data.RData")
# Clusters and seed
nCores <- 2
totalCores <- 10
mySeed <- 123
# Randomly sample indices for train and test data
nObs <- nrow(coords)
indices <- readRDS("results/data_split.RDS")
indexTrain <- indices[[1]]
indexTest <- indices[[2]]
nTrain <- n <- length(indexTrain)
nTest <- length(indexTest)
nTrain <- 200
nTest <- 50
indexTrain <- indexTrain[1:200]
indexTest <- indexTest[1:50]
# Divide using train and test indices
storms <- 1:50
Y <- c(t(out[storms, indexTrain]))
X <- cbind(
inputs[storms, ][rep(storms, each = nTrain), ],
elev = rep(coords$elev_meters[indexTrain], length(storms))
)
YTest <- c(t(out[storms, indexTest]))
XTest <- cbind(
inputs[storms, ][rep(storms, each = nTest), ],
elev = rep(coords$elev_meters[indexTest], length(storms))
)
# BART
flood_results_bart <- bart(X, Y, XTest)
mean((flood_results_bart$yhat.test.mean - YTest)^2)
length(YTest)
nTrain
length(storms)
nTest
length(flood_results_bart$yhat.test.mean)
dim(out[1,indexTest])
length(out[1,indexTest])
YTest
dim(XTest)
XTest[199:201]
XTest[199:201,]
XTest[199:202,]
length(out[1,indexTest])
dim(out)
XTest[49:52,]
length(YTest[1:50])
test_subj
test_subj <- 1
nTest
((test_subj - 1) * nTest + 1):(test_subj * nTest)
test_subj <- 2
((test_subj - 1) * nTest + 1):(test_subj * nTest)
test_subj <- 6
((test_subj - 1) * nTest + 1):(test_subj * nTest)
plot(flood_results_bart)
dim(flood_results_bart$yhat.test)
dim(flood_results_bart$yhat.test[ , 1:50])
apply(flood_results_bart$yhat.test[ , 1:50], 1, quantile, c(0.025, 0.975))
unname(apply(flood_results_bart$yhat.test[ , 1:50], 1, quantile, c(0.025, 0.975)))
c(unname(apply(flood_results_bart$yhat.test[ , 1:50], 1, quantile, c(0.025, 0.975))))
c(unname(apply(flood_results_bart$yhat.test[ , 1:50], 2, quantile, c(0.025, 0.975))))
unname(apply(flood_results_bart$yhat.test[ , 1:50], 2, quantile, c(0.025, 0.975)))
t(unname(apply(flood_results_bart$yhat.test[ , 1:50], 2, quantile, c(0.025, 0.975))))
head(t(unname(apply(flood_results_bart$yhat.test[ , 1:50], 2, quantile, c(0.025, 0.975)))))
YTest[1:6]
flood_results_bart$yhat.test.mean
flood_results_bart$yhat.test.mean[1:6]
YTest[1:6]
head(t(unname(apply(flood_results_bart$yhat.test[ , 1:50], 2, quantile, c(0.025, 0.975)))))
((test_subj - 1) * nTest + 1):(test_subj * nTest)
YTest[((test_subj - 1) * nTest + 1):(test_subj * nTest)]
unname(apply(flood_results_bart$yhat.test[ , 1:50], 2, quantile, c(0.025, 0.975))
)
unname(apply(flood_results_bart$yhat.test[ , 1:50], 2, quantile, c(0.025, 0.975)))
unname(apply(flood_results_bart$yhat.test[ , 1:nTest], 2, quantile, c(0.025, 0.975)))
dim(out[1, indexTest])
length(out[1, indexTest])
out[1, indexTest][[1]]
out[1, indexTest]
out[1, indexTest][1]
c(1,2,3)[[1]]
c(1,2,3)[[2]]
