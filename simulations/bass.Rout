
R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(BASS)
> load("data/train.RData")
> #load("data/test.RData")
> holdout.index <- 1:2
> train.index <- 3:10
> simInputs <- matrix(sapply(train.index, \(i) train$X[[i]][1,1]), ncol=1)
> simOutputs <- t(sapply(train.index, \(i) train$Y[[i]]))
> simModel <- bassPCA(simInputs, simOutputs, n.pc=5, n.cores=1)
MCMC Start #-- Oct 09 11:28:49 AM --# nbasis: 0 
MCMC iteration 1000 #-- Oct 09 11:28:50 AM --# nbasis: 1 
MCMC iteration 2000 #-- Oct 09 11:28:50 AM --# nbasis: 1 
MCMC iteration 3000 #-- Oct 09 11:28:50 AM --# nbasis: 1 
MCMC iteration 4000 #-- Oct 09 11:28:51 AM --# nbasis: 1 
MCMC iteration 5000 #-- Oct 09 11:28:51 AM --# nbasis: 1 
MCMC iteration 6000 #-- Oct 09 11:28:51 AM --# nbasis: 1 
MCMC iteration 7000 #-- Oct 09 11:28:52 AM --# nbasis: 1 
MCMC iteration 8000 #-- Oct 09 11:28:52 AM --# nbasis: 1 
MCMC iteration 9000 #-- Oct 09 11:28:52 AM --# nbasis: 1 
MCMC iteration 10000 #-- Oct 09 11:28:53 AM --# nbasis: 1 
MCMC Start #-- Oct 09 11:28:53 AM --# nbasis: 0 
MCMC iteration 1000 #-- Oct 09 11:28:53 AM --# nbasis: 2 
MCMC iteration 2000 #-- Oct 09 11:28:53 AM --# nbasis: 2 
MCMC iteration 3000 #-- Oct 09 11:28:53 AM --# nbasis: 2 
MCMC iteration 4000 #-- Oct 09 11:28:54 AM --# nbasis: 0 
MCMC iteration 5000 #-- Oct 09 11:28:54 AM --# nbasis: 2 
MCMC iteration 6000 #-- Oct 09 11:28:55 AM --# nbasis: 2 
MCMC iteration 7000 #-- Oct 09 11:28:55 AM --# nbasis: 1 
MCMC iteration 8000 #-- Oct 09 11:28:56 AM --# nbasis: 1 
MCMC iteration 9000 #-- Oct 09 11:28:56 AM --# nbasis: 2 
MCMC iteration 10000 #-- Oct 09 11:28:56 AM --# nbasis: 2 
MCMC Start #-- Oct 09 11:28:56 AM --# nbasis: 0 
MCMC iteration 1000 #-- Oct 09 11:28:57 AM --# nbasis: 3 
MCMC iteration 2000 #-- Oct 09 11:28:57 AM --# nbasis: 0 
MCMC iteration 3000 #-- Oct 09 11:28:57 AM --# nbasis: 0 
MCMC iteration 4000 #-- Oct 09 11:28:58 AM --# nbasis: 0 
MCMC iteration 5000 #-- Oct 09 11:28:58 AM --# nbasis: 0 
MCMC iteration 6000 #-- Oct 09 11:28:59 AM --# nbasis: 0 
MCMC iteration 7000 #-- Oct 09 11:28:59 AM --# nbasis: 1 
MCMC iteration 8000 #-- Oct 09 11:28:59 AM --# nbasis: 0 
MCMC iteration 9000 #-- Oct 09 11:29:00 AM --# nbasis: 2 
MCMC iteration 10000 #-- Oct 09 11:29:00 AM --# nbasis: 0 
MCMC Start #-- Oct 09 11:29:00 AM --# nbasis: 0 
MCMC iteration 1000 #-- Oct 09 11:29:01 AM --# nbasis: 0 
MCMC iteration 2000 #-- Oct 09 11:29:01 AM --# nbasis: 1 
MCMC iteration 3000 #-- Oct 09 11:29:01 AM --# nbasis: 1 
MCMC iteration 4000 #-- Oct 09 11:29:02 AM --# nbasis: 1 
MCMC iteration 5000 #-- Oct 09 11:29:02 AM --# nbasis: 1 
MCMC iteration 6000 #-- Oct 09 11:29:02 AM --# nbasis: 1 
MCMC iteration 7000 #-- Oct 09 11:29:03 AM --# nbasis: 0 
MCMC iteration 8000 #-- Oct 09 11:29:03 AM --# nbasis: 2 
MCMC iteration 9000 #-- Oct 09 11:29:04 AM --# nbasis: 1 
MCMC iteration 10000 #-- Oct 09 11:29:04 AM --# nbasis: 3 
MCMC Start #-- Oct 09 11:29:04 AM --# nbasis: 0 
MCMC iteration 1000 #-- Oct 09 11:29:04 AM --# nbasis: 2 
MCMC iteration 2000 #-- Oct 09 11:29:05 AM --# nbasis: 0 
MCMC iteration 3000 #-- Oct 09 11:29:05 AM --# nbasis: 2 
MCMC iteration 4000 #-- Oct 09 11:29:05 AM --# nbasis: 0 
MCMC iteration 5000 #-- Oct 09 11:29:06 AM --# nbasis: 2 
MCMC iteration 6000 #-- Oct 09 11:29:06 AM --# nbasis: 0 
MCMC iteration 7000 #-- Oct 09 11:29:07 AM --# nbasis: 1 
MCMC iteration 8000 #-- Oct 09 11:29:07 AM --# nbasis: 3 
MCMC iteration 9000 #-- Oct 09 11:29:07 AM --# nbasis: 1 
MCMC iteration 10000 #-- Oct 09 11:29:08 AM --# nbasis: 2 
> testInputs <- matrix(sapply(holdout.index, \(i) train$X[[i]][1,1]), ncol=1)
> simPredictions <- predict(simModel, testInputs)
> 
> simPreds <- apply(simPredictions, 2:3, mean)
> mspe <- sapply(holdout.index, \(i) mean((simPreds[i,] - train$Y[[i]])^2) )
> mean(mspe)
[1] 1363.056
> 
> pct <- sapply(holdout.index, \(i) mean((simPreds[i,] > 4) == (train$Y[[i]] > 4)) )
> 1-mean(pct)
[1] 0
> 
> simPreds[1,][1:25]
 [1] 63.73445 65.33908 64.97868 63.48641 64.97012 64.51385 66.92830 66.00139
 [9] 67.40501 66.07439 62.79262 67.61010 62.98229 65.87545 68.21162 64.62941
[17] 62.18469 65.06995 63.21168 67.28769 66.49170 67.72244 66.09593 66.91304
[25] 65.41213
> train$Y[[1]][1:25]
 [1] 17.03445 18.63908 18.27868 16.78641 18.27012 17.81385 20.22830 19.30139
 [9] 20.70501 19.37439 16.09262 20.91010 16.28229 19.17545 21.51162 17.92941
[17] 15.48469 18.36995 16.51168 20.58769 19.79170 21.02244 19.39593 20.21304
[25] 18.71213
> 
> proc.time()
   user  system elapsed 
 31.638   1.475  33.211 
