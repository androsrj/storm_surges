
R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> # Tables for paper
> DC_full_gp <- readRDS("results/d_and_c/full_gp/final_results.RDS")
> DC_mpp <- readRDS("results/d_and_c/mpp/final_results.RDS")
> DC_sparse_gp <- readRDS("results/d_and_c/sparse_gp/final_results.RDS")
> sketch_full_gp <- readRDS("results/sketching/full_gp/final_results.RDS")
> sketch_mpp <- readRDS("results/sketching/mpp/final_results.RDS")
> sketch_sparse_gp <- readRDS("results/sketching/sparse_gp/final_results.RDS")
> load("data/test.RData")
> 
> # Check acceptance rates first
> sapply(DC_full_gp, \(x) x$acc)
          [,1]    [,2]    [,3]    [,4]
sigma2 0.26396 0.25736 0.22016 0.23264
tau2   0.14520 0.15272 0.25892 0.21108
> sapply(DC_mpp, \(x) x$acc)
          [,1]    [,2]    [,3]    [,4]
sigma2 0.22692 0.19252 0.19484 0.20404
tau2   0.34288 0.60036 0.59968 0.54792
> sapply(DC_sparse_gp, \(x) x$acc)
          [,1]    [,2]    [,3]    [,4]
sigma2 0.26192 0.24996 0.22732 0.23036
tau2   0.14724 0.15252 0.26736 0.23044
> sketch_full_gp$acc
 sigma2    tau2 
0.18228 0.16356 
> sketch_mpp$acc
 sigma2    tau2 
0.16708 0.27864 
> sketch_sparse_gp$acc
 sigma2    tau2 
0.18580 0.16524 
> 
> model <- rep(c("Full_GP", "MPP", "Sparse_GP"), each = 5)
> splitType <- rep(c("Subdomains", "Stratified", "Multiplets", "Random", "Sketching"), 3)
> 
> #######################################################################
> 
> sigma2Mean <- unname(c(sapply(DC_full_gp, \(x) x$means[1]), 
+                        sketch_full_gp$means[1],
+                        sapply(DC_mpp, \(x) x$means[1]),
+                        sketch_mpp$means[1],
+                        sapply(DC_sparse_gp, \(x) x$means[1]),
+                        sketch_sparse_gp$means[1]))
> 
> sigma2Lower <- unname(c(sapply(DC_full_gp, \(x) x$lower[1]), 
+                         sketch_full_gp$lower[1],
+                         sapply(DC_mpp, \(x) x$lower[1]),
+                         sketch_mpp$lower[1],
+                         sapply(DC_sparse_gp, \(x) x$lower[1]),
+                         sketch_sparse_gp$lower[1]))
> 
> sigma2Upper <- unname(c(sapply(DC_full_gp, \(x) x$upper[1]), 
+                         sketch_full_gp$upper[1],
+                         sapply(DC_mpp, \(x) x$upper[1]),
+                         sketch_mpp$upper[1],
+                         sapply(DC_sparse_gp, \(x) x$upper[1]),
+                         sketch_sparse_gp$upper[1]))
> 
> #######################################################################
> 
> tau2Mean <- unname(c(sapply(DC_full_gp, \(x) x$means[2]), 
+                      sketch_full_gp$means[2],
+                      sapply(DC_mpp, \(x) x$means[2]),
+                      sketch_mpp$means[2],
+                      sapply(DC_sparse_gp, \(x) x$means[2]),
+                      sketch_sparse_gp$means[2]))
> 
> tau2Lower <- unname(c(sapply(DC_full_gp, \(x) x$lower[2]), 
+                       sketch_full_gp$lower[2],
+                       sapply(DC_mpp, \(x) x$lower[2]),
+                       sketch_mpp$lower[2],
+                       sapply(DC_sparse_gp, \(x) x$lower[2]),
+                       sketch_sparse_gp$lower[2]))
> 
> tau2Upper <- unname(c(sapply(DC_full_gp, \(x) x$upper[2]), 
+                       sketch_full_gp$upper[2],
+                       sapply(DC_mpp, \(x) x$upper[2]),
+                       sketch_mpp$upper[2],
+                       sapply(DC_sparse_gp, \(x) x$upper[2]),
+                       sketch_sparse_gp$upper[2]))
> 
> #######################################################################
> 
> gammaMean <- unname(c(sapply(DC_full_gp, \(x) x$means[3]), 
+                       sketch_full_gp$means[3],
+                       sapply(DC_mpp, \(x) x$means[3]),
+                       sketch_mpp$means[3],
+                       sapply(DC_sparse_gp, \(x) x$means[3]),
+                       sketch_sparse_gp$means[3]))
> 
> gammaLower <- unname(c(sapply(DC_full_gp, \(x) x$lower[3]), 
+                        sketch_full_gp$lower[3],
+                        sapply(DC_mpp, \(x) x$lower[3]),
+                        sketch_mpp$lower[3],
+                        sapply(DC_sparse_gp, \(x) x$lower[3]),
+                        sketch_sparse_gp$lower[3]))
> 
> gammaUpper <- unname(c(sapply(DC_full_gp, \(x) x$upper[3]), 
+                        sketch_full_gp$upper[3],
+                        sapply(DC_mpp, \(x) x$upper[3]),
+                        sketch_mpp$upper[3],
+                        sapply(DC_sparse_gp, \(x) x$upper[3]),
+                        sketch_sparse_gp$upper[3]))
> 
> #######################################################################
> 
> beta1Mean <- unname(c(sapply(DC_full_gp, \(x) x$means[4]), 
+                       sketch_full_gp$means[4],
+                       sapply(DC_mpp, \(x) x$means[4]),
+                       sketch_mpp$means[4],
+                       sapply(DC_sparse_gp, \(x) x$means[4]),
+                       sketch_sparse_gp$means[4]))
> 
> beta1Lower <- unname(c(sapply(DC_full_gp, \(x) x$lower[4]), 
+                        sketch_full_gp$lower[4],
+                        sapply(DC_mpp, \(x) x$lower[4]),
+                        sketch_mpp$lower[4],
+                        sapply(DC_sparse_gp, \(x) x$lower[4]),
+                        sketch_sparse_gp$lower[4]))
> 
> beta1Upper <- unname(c(sapply(DC_full_gp, \(x) x$upper[4]), 
+                        sketch_full_gp$upper[4],
+                        sapply(DC_mpp, \(x) x$upper[4]),
+                        sketch_mpp$upper[4],
+                        sapply(DC_sparse_gp, \(x) x$upper[4]),
+                        sketch_sparse_gp$upper[4]))
> 
> #######################################################################
> 
> beta2Mean <- unname(c(sapply(DC_full_gp, \(x) x$means[5]), 
+                       sketch_full_gp$means[5],
+                       sapply(DC_mpp, \(x) x$means[5]),
+                       sketch_mpp$means[5],
+                       sapply(DC_sparse_gp, \(x) x$means[5]),
+                       sketch_sparse_gp$means[5]))
> 
> beta2Lower <- unname(c(sapply(DC_full_gp, \(x) x$lower[5]), 
+                        sketch_full_gp$lower[5],
+                        sapply(DC_mpp, \(x) x$lower[5]),
+                        sketch_mpp$lower[5],
+                        sapply(DC_sparse_gp, \(x) x$lower[5]),
+                        sketch_sparse_gp$lower[5]))
> 
> beta2Upper <- unname(c(sapply(DC_full_gp, \(x) x$upper[5]), 
+                        sketch_full_gp$upper[5],
+                        sapply(DC_mpp, \(x) x$upper[5]),
+                        sketch_mpp$upper[5],
+                        sapply(DC_sparse_gp, \(x) x$upper[5]),
+                        sketch_sparse_gp$upper[5]))
> 
> #######################################################################
> 
> lowerPreds <- rbind(t(sapply(DC_full_gp, \(x) x$predictions[1, ])), 
+                     sketch_full_gp$predictions[1, ],
+                     t(sapply(DC_mpp, \(x) x$predictions[1, ])), 
+                     sketch_mpp$predictions[1, ],
+                     t(sapply(DC_sparse_gp, \(x) x$predictions[1, ])),
+                     sketch_sparse_gp$predictions[1, ])
> 
> upperPreds <- rbind(t(sapply(DC_full_gp, \(x) x$predictions[3, ])), 
+                     sketch_full_gp$predictions[3, ],
+                     t(sapply(DC_mpp, \(x) x$predictions[3, ])), 
+                     sketch_mpp$predictions[3, ],
+                     t(sapply(DC_sparse_gp, \(x) x$predictions[3, ])),
+                     sketch_sparse_gp$predictions[3, ])
> 
> pointPreds <- rbind(t(sapply(DC_full_gp, \(x) x$predictions[2, ])), 
+                     sketch_full_gp$predictions[2, ],
+                     t(sapply(DC_mpp, \(x) x$predictions[2, ])), 
+                     sketch_mpp$predictions[2, ],
+                     t(sapply(DC_sparse_gp, \(x) x$predictions[2, ])),
+                     sketch_sparse_gp$predictions[2, ])
> 
> test_subj <- 1
> MSPE <- apply(pointPreds, 1, \(x) mean((x - test$Y[[test_subj]])^2))
> cvg_ind <- sapply(1:15, \(i) lowerPreds[i, ] <= test$Y[[test_subj]] & upperPreds[i, ] >= test$Y[[test_subj]])
> coverage <- apply(cvg_ind, 2, mean)
> length <- apply(upperPreds - lowerPreds, 1, mean)
> a <- .05
> score <- sapply(1:15, \(i) mean( (upperPreds[i,] - lowerPreds[i,]) + 2/a * (lowerPreds[i,] - test$Y[[test_subj]]) * (test$Y[[test_subj]] < lowerPreds[i,]) + 2/a * (test$Y[[test_subj]] - upperPreds[i,]) * (test$Y[[test_subj]] > upperPreds[i,]) ) )
> 
> df <- data.frame(model, splitType,
+                  sigma2Mean, sigma2Lower, sigma2Upper,
+                  tau2Mean, tau2Lower, tau2Upper,
+                  beta1Mean, beta1Lower, beta1Upper,
+                  beta2Mean, beta2Lower, beta2Upper,
+ 		 gammaMean, gammaLower, gammaUpper,
+                  MSPE, coverage, length, score)
> 
> df
       model  splitType sigma2Mean sigma2Lower sigma2Upper   tau2Mean
1    Full_GP Subdomains   2.001215    1.966028    2.034987 0.19622580
2    Full_GP Stratified   2.165601    2.129568    2.199592 0.21490262
3    Full_GP Multiplets   1.870545    1.840068    1.900404 0.20910220
4    Full_GP     Random   1.876796    1.844593    1.907403 0.26830414
5    Full_GP  Sketching   1.990749    1.953486    2.024389 0.28461817
6        MPP Subdomains   1.609612    1.577804    1.640537 0.18467420
7        MPP Stratified   1.805623    1.784090    1.827802 0.04795680
8        MPP Multiplets   1.909678    1.883575    1.935256 0.07911002
9        MPP     Random   1.936794    1.906337    1.967395 0.11069454
10       MPP  Sketching   1.950770    1.924203    1.979897 0.18543111
11 Sparse_GP Subdomains   2.109455    2.072616    2.144947 0.19650298
12 Sparse_GP Stratified   2.119843    2.085409    2.154120 0.20887513
13 Sparse_GP Multiplets   1.900971    1.870581    1.932529 0.24088358
14 Sparse_GP     Random   1.899955    1.870182    1.931717 0.24074628
15 Sparse_GP  Sketching   1.802768    1.772055    1.835067 0.31982150
    tau2Lower  tau2Upper beta1Mean beta1Lower beta1Upper  beta2Mean beta2Lower
1  0.19071926 0.20228837  1.963268   1.628220   2.306933 -0.9957253 -1.0105551
2  0.20886382 0.22176229  1.970132   1.863019   2.075637 -0.9946557 -1.0105730
3  0.19695450 0.22195888  1.962616   1.902211   2.024091 -0.9909554 -1.0114750
4  0.25653239 0.28058258  1.979180   1.910792   2.045905 -0.9883233 -1.0088176
5  0.27017891 0.30078816  1.951857   1.933466   1.970103 -0.9904810 -0.9981178
6  0.16949942 0.20077458  1.779991   1.533384   2.020344 -0.9910945 -1.0115907
7  0.03971555 0.05681741  1.881841   1.809017   1.955130 -0.9889095 -1.0094503
8  0.06704791 0.09171565  1.913145   1.855228   1.969736 -0.9930498 -1.0164497
9  0.09558865 0.12629214  1.915589   1.850751   1.977445 -0.9872618 -1.0100047
10 0.17462544 0.19529503  1.938285   1.921560   1.954933 -0.9897076 -0.9976884
11 0.19094353 0.20272429  1.973664   1.625550   2.311962 -0.9954193 -1.0099241
12 0.20242787 0.21550782  1.961727   1.859703   2.066374 -0.9938553 -1.0099328
13 0.22896616 0.25321134  1.967482   1.898993   2.034101 -0.9922987 -1.0131418
14 0.22844885 0.25210045  1.976159   1.912039   2.043009 -0.9873896 -1.0083966
15 0.30555921 0.33569744  1.996181   1.978973   2.012889 -0.9824000 -0.9897926
   beta2Upper gammaMean gammaLower gammaUpper     MSPE coverage   length
1  -0.9807322  4.994775   4.986131   5.003512 2.302802    0.933 5.708331
2  -0.9785591  4.996645   4.993495   4.999746 2.291830    0.943 5.910618
3  -0.9703207  4.997538   4.995437   4.999626 2.305450    0.925 5.520343
4  -0.9679547  4.997835   4.995505   5.000192 2.294781    0.931 5.608701
5  -0.9830463  4.997190   4.996519   4.997866 2.302842    0.934 5.758574
6  -0.9709556  4.998143   4.992230   5.004132 2.386803    0.903 5.144574
7  -0.9676793  4.996719   4.994396   4.999021 2.320557    0.909 5.208024
8  -0.9698301  4.998051   4.995991   5.000126 2.315611    0.919 5.404067
9  -0.9639330  4.998395   4.996044   5.000666 2.309692    0.923 5.474926
10 -0.9816491  4.998077   4.997468   4.998679 2.315024    0.927 5.589330
11 -0.9811783  4.994679   4.985443   5.003810 2.289464    0.939 5.821449
12 -0.9778929  4.996487   4.993517   4.999352 2.307053    0.940 5.835439
13 -0.9716769  4.997655   4.995353   4.999941 2.290129    0.931 5.608902
14 -0.9664043  4.997742   4.995404   5.000009 2.302766    0.933 5.603389
15 -0.9749847  4.997808   4.997181   4.998434 2.288174    0.924 5.566461
      score
1  7.094073
2  7.092680
3  7.167688
4  7.208720
5  7.101777
6  7.576835
7  7.439859
8  7.294534
9  7.199716
10 7.218306
11 7.005271
12 7.111102
13 7.122074
14 7.164426
15 7.119013
> 
> proc.time()
   user  system elapsed 
 10.235   2.987  13.221 
