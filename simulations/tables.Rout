
R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> # Tables for paper
> DC_full_gp <- readRDS("results/d_and_c/full_gp/final_results.RDS")
> DC_mpp <- readRDS("results/d_and_c/mpp/final_results.RDS")
> DC_sparse_gp <- readRDS("results/d_and_c/sparse_gp/final_results.RDS")
> sketch_full_gp <- readRDS("results/sketching/full_gp/final_results.RDS")
> sketch_mpp <- readRDS("results/sketching/mpp/final_results.RDS")
> sketch_sparse_gp <- readRDS("results/sketching/sparse_gp/final_results.RDS")
> load("data/test.RData")
> 
> # Check acceptance rates first
> sapply(DC_full_gp, \(x) x$acc)
          [,1]    [,2]    [,3]    [,4]
sigma2 0.25984 0.25264 0.22708 0.22428
tau2   0.14656 0.16004 0.28916 0.29768
> sapply(DC_mpp, \(x) x$acc)
          [,1]    [,2]    [,3]    [,4]
sigma2 0.23064 0.18996 0.20024 0.19732
tau2   0.27100 0.66540 0.54024 0.69608
> sapply(DC_sparse_gp, \(x) x$acc)
          [,1]    [,2]    [,3]    [,4]
sigma2 0.25456 0.24728 0.23188 0.22788
tau2   0.14616 0.15364 0.27512 0.21360
> sketch_full_gp$acc
 sigma2    tau2 
0.18988 0.17772 
> sketch_mpp$acc
 sigma2    tau2 
0.15984 0.28620 
> sketch_sparse_gp$acc
 sigma2    tau2 
0.18704 0.21012 
> 
> test_subjects <- 1:3
> model <- rep(c("Full_GP", "MPP", "Sparse_GP"), each = 5)
> splitType <- rep(c("Subdomains", "Stratified", "Multiplets", "Random", "Sketching"), 3)
> 
> #######################################################################
> 
> sigma2Mean <- unname(c(sapply(DC_full_gp, \(x) x$means[1]), 
+                        sketch_full_gp$means[1],
+                        sapply(DC_mpp, \(x) x$means[1]),
+                        sketch_mpp$means[1],
+                        sapply(DC_sparse_gp, \(x) x$means[1]),
+                        sketch_sparse_gp$means[1]))
> 
> sigma2Lower <- unname(c(sapply(DC_full_gp, \(x) x$lower[1]), 
+                         sketch_full_gp$lower[1],
+                         sapply(DC_mpp, \(x) x$lower[1]),
+                         sketch_mpp$lower[1],
+                         sapply(DC_sparse_gp, \(x) x$lower[1]),
+                         sketch_sparse_gp$lower[1]))
> 
> sigma2Upper <- unname(c(sapply(DC_full_gp, \(x) x$upper[1]), 
+                         sketch_full_gp$upper[1],
+                         sapply(DC_mpp, \(x) x$upper[1]),
+                         sketch_mpp$upper[1],
+                         sapply(DC_sparse_gp, \(x) x$upper[1]),
+                         sketch_sparse_gp$upper[1]))
> 
> #######################################################################
> 
> tau2Mean <- unname(c(sapply(DC_full_gp, \(x) x$means[2]), 
+                      sketch_full_gp$means[2],
+                      sapply(DC_mpp, \(x) x$means[2]),
+                      sketch_mpp$means[2],
+                      sapply(DC_sparse_gp, \(x) x$means[2]),
+                      sketch_sparse_gp$means[2]))
> 
> tau2Lower <- unname(c(sapply(DC_full_gp, \(x) x$lower[2]), 
+                       sketch_full_gp$lower[2],
+                       sapply(DC_mpp, \(x) x$lower[2]),
+                       sketch_mpp$lower[2],
+                       sapply(DC_sparse_gp, \(x) x$lower[2]),
+                       sketch_sparse_gp$lower[2]))
> 
> tau2Upper <- unname(c(sapply(DC_full_gp, \(x) x$upper[2]), 
+                       sketch_full_gp$upper[2],
+                       sapply(DC_mpp, \(x) x$upper[2]),
+                       sketch_mpp$upper[2],
+                       sapply(DC_sparse_gp, \(x) x$upper[2]),
+                       sketch_sparse_gp$upper[2]))
> 
> #######################################################################
> 
> gammaMean <- unname(c(sapply(DC_full_gp, \(x) x$means[3]), 
+                       sketch_full_gp$means[3],
+                       sapply(DC_mpp, \(x) x$means[3]),
+                       sketch_mpp$means[3],
+                       sapply(DC_sparse_gp, \(x) x$means[3]),
+                       sketch_sparse_gp$means[3]))
> 
> gammaLower <- unname(c(sapply(DC_full_gp, \(x) x$lower[3]), 
+                        sketch_full_gp$lower[3],
+                        sapply(DC_mpp, \(x) x$lower[3]),
+                        sketch_mpp$lower[3],
+                        sapply(DC_sparse_gp, \(x) x$lower[3]),
+                        sketch_sparse_gp$lower[3]))
> 
> gammaUpper <- unname(c(sapply(DC_full_gp, \(x) x$upper[3]), 
+                        sketch_full_gp$upper[3],
+                        sapply(DC_mpp, \(x) x$upper[3]),
+                        sketch_mpp$upper[3],
+                        sapply(DC_sparse_gp, \(x) x$upper[3]),
+                        sketch_sparse_gp$upper[3]))
> 
> #######################################################################
> 
> beta1Mean <- unname(c(sapply(DC_full_gp, \(x) x$means[4]), 
+                       sketch_full_gp$means[4],
+                       sapply(DC_mpp, \(x) x$means[4]),
+                       sketch_mpp$means[4],
+                       sapply(DC_sparse_gp, \(x) x$means[4]),
+                       sketch_sparse_gp$means[4]))
> 
> beta1Lower <- unname(c(sapply(DC_full_gp, \(x) x$lower[4]), 
+                        sketch_full_gp$lower[4],
+                        sapply(DC_mpp, \(x) x$lower[4]),
+                        sketch_mpp$lower[4],
+                        sapply(DC_sparse_gp, \(x) x$lower[4]),
+                        sketch_sparse_gp$lower[4]))
> 
> beta1Upper <- unname(c(sapply(DC_full_gp, \(x) x$upper[4]), 
+                        sketch_full_gp$upper[4],
+                        sapply(DC_mpp, \(x) x$upper[4]),
+                        sketch_mpp$upper[4],
+                        sapply(DC_sparse_gp, \(x) x$upper[4]),
+                        sketch_sparse_gp$upper[4]))
> 
> #######################################################################
> 
> beta2Mean <- unname(c(sapply(DC_full_gp, \(x) x$means[5]), 
+                       sketch_full_gp$means[5],
+                       sapply(DC_mpp, \(x) x$means[5]),
+                       sketch_mpp$means[5],
+                       sapply(DC_sparse_gp, \(x) x$means[5]),
+                       sketch_sparse_gp$means[5]))
> 
> beta2Lower <- unname(c(sapply(DC_full_gp, \(x) x$lower[5]), 
+                        sketch_full_gp$lower[5],
+                        sapply(DC_mpp, \(x) x$lower[5]),
+                        sketch_mpp$lower[5],
+                        sapply(DC_sparse_gp, \(x) x$lower[5]),
+                        sketch_sparse_gp$lower[5]))
> 
> beta2Upper <- unname(c(sapply(DC_full_gp, \(x) x$upper[5]), 
+                        sketch_full_gp$upper[5],
+                        sapply(DC_mpp, \(x) x$upper[5]),
+                        sketch_mpp$upper[5],
+                        sapply(DC_sparse_gp, \(x) x$upper[5]),
+                        sketch_sparse_gp$upper[5]))
> 
> #######################################################################
> 
> MSPE <- cvg_ind <- score <- numeric(15)
> 
> for (i in test_subjects) {
+   lowerPreds <- rbind(t(sapply(DC_full_gp, \(x) x$predictions[[i]][1, ])),
+ 		      sketch_full_gp$predictions[[i]][1, ],
+ 		      t(sapply(DC_mpp, \(x) x$predictions[[i]][1, ])),
+                       sketch_mpp$predictions[[i]][1, ],
+ 		      t(sapply(DC_sparse_gp, \(x) x$predictions[[i]][1, ])),
+                       sketch_sparse_gp$predictions[[i]][1, ])
+   upperPreds <- rbind(t(sapply(DC_full_gp, \(x) x$predictions[[i]][3, ])),
+                       sketch_full_gp$predictions[[i]][3, ],
+                       t(sapply(DC_mpp, \(x) x$predictions[[i]][3, ])),
+                       sketch_mpp$predictions[[i]][3, ],
+                       t(sapply(DC_sparse_gp, \(x) x$predictions[[i]][3, ])),
+                       sketch_sparse_gp$predictions[[i]][3, ])
+   pointPreds <- rbind(t(sapply(DC_full_gp, \(x) x$predictions[[i]][2, ])),
+                       sketch_full_gp$predictions[[i]][2, ],
+                       t(sapply(DC_mpp, \(x) x$predictions[[i]][2, ])),
+                       sketch_mpp$predictions[[i]][2, ],
+                       t(sapply(DC_sparse_gp, \(x) x$predictions[[i]][2, ])),
+                       sketch_sparse_gp$predictions[[i]][2, ])
+ 
+   MSPE <- MSPE + apply(pointPreds, 1, \(x) mean((x - test$Y[[i]])^2))
+   cvg_ind <- cvg_ind + sapply(1:15, \(j) lowerPreds[j, ] <= test$Y[[i]] & upperPreds[j, ] >= test$Y[[i]])
+   a <- .05
+   score <- score + sapply(1:15, \(j) mean( (upperPreds[j,] - lowerPreds[j,]) +
+                                    2/a * (lowerPreds[j,] - test$Y[[i]]) *
+                                    (test$Y[[i]] < lowerPreds[j,]) + 2/a *
+                                    (test$Y[[i]] - upperPreds[j,]) *
+                                    (test$Y[[i]] > upperPreds[j,]) ) )
+ }
> MSPE <- MSPE / length(test_subjects)
> cvg_ind <- cvg_ind / length(test_subjects)
> coverage <- apply(cvg_ind, 2, mean)
> score <- score / length(test_subjects)
> 
> df <- data.frame(model, splitType,
+                  sigma2Mean, sigma2Lower, sigma2Upper,
+                  tau2Mean, tau2Lower, tau2Upper,
+                  beta1Mean, beta1Lower, beta1Upper,
+                  beta2Mean, beta2Lower, beta2Upper,
+ 		 gammaMean, gammaLower, gammaUpper,
+                  MSPE, coverage, score)
> 
> df
       model  splitType sigma2Mean sigma2Lower sigma2Upper   tau2Mean
1    Full_GP Subdomains   2.117541    2.078739    2.154362 0.19776425
2    Full_GP Stratified   2.032928    2.001307    2.065371 0.20092727
3    Full_GP Multiplets   1.901308    1.869701    1.931588 0.21418220
4    Full_GP     Random   1.871853    1.843255    1.901630 0.18750157
5    Full_GP  Sketching   1.838400    1.803888    1.870639 0.30757252
6        MPP Subdomains   1.523821    1.495105    1.554051 0.23572327
7        MPP Stratified   1.752944    1.734423    1.771051 0.02961950
8        MPP Multiplets   1.924921    1.895202    1.956189 0.12176445
9        MPP     Random   1.925169    1.902463    1.948026 0.03953729
10       MPP  Sketching   2.036851    2.008471    2.065119 0.15765982
11 Sparse_GP Subdomains   1.951499    1.917928    1.985054 0.19334646
12 Sparse_GP Stratified   2.074423    2.041192    2.106358 0.20297659
13 Sparse_GP Multiplets   1.902666    1.870724    1.935474 0.23462522
14 Sparse_GP     Random   1.944796    1.911645    1.977429 0.25514950
15 Sparse_GP  Sketching   1.856133    1.826896    1.887758 0.30888498
    tau2Lower  tau2Upper beta1Mean beta1Lower beta1Upper  beta2Mean beta2Lower
1  0.19188270 0.20430142  1.961999   1.614705   2.308323 -0.9956184 -1.0102907
2  0.19478605 0.20710112  1.962424   1.865522   2.057278 -0.9944641 -1.0107503
3  0.20126245 0.22674674  1.969676   1.905093   2.034576 -0.9969962 -1.0178820
4  0.17575142 0.19893307  1.958500   1.898759   2.020602 -0.9890551 -1.0096881
5  0.29323378 0.32348318  1.978420   1.960745   1.995704 -0.9785464 -0.9858833
6  0.21964408 0.25144812  2.006779   1.790398   2.231035 -0.9934458 -1.0140287
7  0.02395074 0.03589773  1.986072   1.921192   2.049341 -0.9913104 -1.0128815
8  0.10606889 0.13739205  1.983662   1.920664   2.046462 -0.9915388 -1.0157925
9  0.03057923 0.05012660  1.971873   1.915300   2.028322 -0.9879611 -1.0109461
10 0.14593011 0.16998821  2.005444   1.987625   2.022523 -0.9970183 -1.0050884
11 0.18777094 0.19969815  1.971659   1.657041   2.281216 -0.9955183 -1.0101756
12 0.19670378 0.20927989  1.962829   1.863385   2.059978 -0.9942084 -1.0100539
13 0.22208376 0.24761563  1.967598   1.901178   2.033014 -0.9963640 -1.0172896
14 0.24183518 0.26818984  1.967000   1.895837   2.037375 -0.9906804 -1.0112365
15 0.29561991 0.32118589  1.970339   1.953084   1.987779 -0.9468606 -0.9545008
   beta2Upper gammaMean gammaLower gammaUpper     MSPE  coverage    score
1  -0.9806772  4.994712   4.985575   5.003641 2.291989 0.9403333 7.050640
2  -0.9786236  4.996665   4.993909   4.999350 2.294988 0.9330000 7.131664
3  -0.9767044  4.997410   4.995202   4.999531 2.295990 0.9250000 7.173801
4  -0.9688523  4.997561   4.995519   4.999613 2.299520 0.9230000 7.210325
5  -0.9712138  4.998471   4.997838   4.999110 2.287588 0.9276667 7.135654
6  -0.9727145  4.995651   4.990143   5.001231 2.284467 0.9106667 7.413973
7  -0.9696971  4.997238   4.995303   4.999197 2.292714 0.9096667 7.494079
8  -0.9682567  4.998082   4.995857   5.000290 2.282343 0.9226667 7.203093
9  -0.9641035  4.998055   4.996082   5.000038 2.294640 0.9196667 7.278630
10 -0.9889208  4.998537   4.997886   4.999148 2.273465 0.9320000 7.112225
11 -0.9812316  4.994634   4.986213   5.002937 2.291864 0.9296667 7.131387
12 -0.9781078  4.996548   4.993780   4.999313 2.298005 0.9353333 7.104412
13 -0.9756459  4.997459   4.995191   4.999722 2.296460 0.9293333 7.167736
14 -0.9705011  4.997786   4.995319   5.000288 2.298854 0.9320000 7.133208
15 -0.9395254  4.998131   4.997517   4.998762 2.295081 0.9316667 7.145460
> 
> proc.time()
   user  system elapsed 
 12.753   1.174  15.773 
