
R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> # Tables for paper
> DC_full_gp <- readRDS("results/d_and_c/full_gp/final_results.RDS")
> DC_mpp <- readRDS("results/d_and_c/mpp/final_results.RDS")
> DC_sparse_gp <- readRDS("results/d_and_c/sparse_gp/final_results.RDS")
> sketch_full_gp <- readRDS("results/sketching/full_gp/final_results.RDS")
> sketch_mpp <- readRDS("results/sketching/mpp/final_results.RDS")
> sketch_sparse_gp <- readRDS("results/sketching/sparse_gp/final_results.RDS")
> load("data/test.RData")
> 
> # Check acceptance rates first
> sapply(DC_full_gp, \(x) x$acc)
          [,1]    [,2]    [,3]    [,4]
sigma2 0.26152 0.24464 0.23508 0.22036
tau2   0.14536 0.16700 0.22968 0.26848
> sapply(DC_mpp, \(x) x$acc)
          [,1]    [,2]    [,3]    [,4]
sigma2 0.23192 0.19316 0.20636 0.19312
tau2   0.29576 0.56372 0.51044 0.64132
> sapply(DC_sparse_gp, \(x) x$acc)
          [,1]    [,2]    [,3]    [,4]
sigma2 0.26624 0.24376 0.23924 0.23180
tau2   0.14376 0.16648 0.20552 0.25084
> sketch_full_gp$acc
 sigma2    tau2 
0.18008 0.18900 
> sketch_mpp$acc
 sigma2    tau2 
0.17104 0.30176 
> sketch_sparse_gp$acc
 sigma2    tau2 
0.18768 0.15476 
> 
> test_subjects <- 1:3
> model <- rep(c("Full_GP", "MPP", "Sparse_GP"), each = 5)
> splitType <- rep(c("Subdomains", "Stratified", "Multiplets", "Random", "Sketching"), 3)
> 
> #######################################################################
> 
> sigma2Mean <- unname(c(sapply(DC_full_gp, \(x) x$means[1]), 
+                        sketch_full_gp$means[1],
+                        sapply(DC_mpp, \(x) x$means[1]),
+                        sketch_mpp$means[1],
+                        sapply(DC_sparse_gp, \(x) x$means[1]),
+                        sketch_sparse_gp$means[1]))
> 
> sigma2Lower <- unname(c(sapply(DC_full_gp, \(x) x$lower[1]), 
+                         sketch_full_gp$lower[1],
+                         sapply(DC_mpp, \(x) x$lower[1]),
+                         sketch_mpp$lower[1],
+                         sapply(DC_sparse_gp, \(x) x$lower[1]),
+                         sketch_sparse_gp$lower[1]))
> 
> sigma2Upper <- unname(c(sapply(DC_full_gp, \(x) x$upper[1]), 
+                         sketch_full_gp$upper[1],
+                         sapply(DC_mpp, \(x) x$upper[1]),
+                         sketch_mpp$upper[1],
+                         sapply(DC_sparse_gp, \(x) x$upper[1]),
+                         sketch_sparse_gp$upper[1]))
> 
> #######################################################################
> 
> tau2Mean <- unname(c(sapply(DC_full_gp, \(x) x$means[2]), 
+                      sketch_full_gp$means[2],
+                      sapply(DC_mpp, \(x) x$means[2]),
+                      sketch_mpp$means[2],
+                      sapply(DC_sparse_gp, \(x) x$means[2]),
+                      sketch_sparse_gp$means[2]))
> 
> tau2Lower <- unname(c(sapply(DC_full_gp, \(x) x$lower[2]), 
+                       sketch_full_gp$lower[2],
+                       sapply(DC_mpp, \(x) x$lower[2]),
+                       sketch_mpp$lower[2],
+                       sapply(DC_sparse_gp, \(x) x$lower[2]),
+                       sketch_sparse_gp$lower[2]))
> 
> tau2Upper <- unname(c(sapply(DC_full_gp, \(x) x$upper[2]), 
+                       sketch_full_gp$upper[2],
+                       sapply(DC_mpp, \(x) x$upper[2]),
+                       sketch_mpp$upper[2],
+                       sapply(DC_sparse_gp, \(x) x$upper[2]),
+                       sketch_sparse_gp$upper[2]))
> 
> #######################################################################
> 
> gammaMean <- unname(c(sapply(DC_full_gp, \(x) x$means[3]), 
+                       sketch_full_gp$means[3],
+                       sapply(DC_mpp, \(x) x$means[3]),
+                       sketch_mpp$means[3],
+                       sapply(DC_sparse_gp, \(x) x$means[3]),
+                       sketch_sparse_gp$means[3]))
> 
> gammaLower <- unname(c(sapply(DC_full_gp, \(x) x$lower[3]), 
+                        sketch_full_gp$lower[3],
+                        sapply(DC_mpp, \(x) x$lower[3]),
+                        sketch_mpp$lower[3],
+                        sapply(DC_sparse_gp, \(x) x$lower[3]),
+                        sketch_sparse_gp$lower[3]))
> 
> gammaUpper <- unname(c(sapply(DC_full_gp, \(x) x$upper[3]), 
+                        sketch_full_gp$upper[3],
+                        sapply(DC_mpp, \(x) x$upper[3]),
+                        sketch_mpp$upper[3],
+                        sapply(DC_sparse_gp, \(x) x$upper[3]),
+                        sketch_sparse_gp$upper[3]))
> 
> #######################################################################
> 
> beta1Mean <- unname(c(sapply(DC_full_gp, \(x) x$means[4]), 
+                       sketch_full_gp$means[4],
+                       sapply(DC_mpp, \(x) x$means[4]),
+                       sketch_mpp$means[4],
+                       sapply(DC_sparse_gp, \(x) x$means[4]),
+                       sketch_sparse_gp$means[4]))
> 
> beta1Lower <- unname(c(sapply(DC_full_gp, \(x) x$lower[4]), 
+                        sketch_full_gp$lower[4],
+                        sapply(DC_mpp, \(x) x$lower[4]),
+                        sketch_mpp$lower[4],
+                        sapply(DC_sparse_gp, \(x) x$lower[4]),
+                        sketch_sparse_gp$lower[4]))
> 
> beta1Upper <- unname(c(sapply(DC_full_gp, \(x) x$upper[4]), 
+                        sketch_full_gp$upper[4],
+                        sapply(DC_mpp, \(x) x$upper[4]),
+                        sketch_mpp$upper[4],
+                        sapply(DC_sparse_gp, \(x) x$upper[4]),
+                        sketch_sparse_gp$upper[4]))
> 
> #######################################################################
> 
> beta2Mean <- unname(c(sapply(DC_full_gp, \(x) x$means[5]), 
+                       sketch_full_gp$means[5],
+                       sapply(DC_mpp, \(x) x$means[5]),
+                       sketch_mpp$means[5],
+                       sapply(DC_sparse_gp, \(x) x$means[5]),
+                       sketch_sparse_gp$means[5]))
> 
> beta2Lower <- unname(c(sapply(DC_full_gp, \(x) x$lower[5]), 
+                        sketch_full_gp$lower[5],
+                        sapply(DC_mpp, \(x) x$lower[5]),
+                        sketch_mpp$lower[5],
+                        sapply(DC_sparse_gp, \(x) x$lower[5]),
+                        sketch_sparse_gp$lower[5]))
> 
> beta2Upper <- unname(c(sapply(DC_full_gp, \(x) x$upper[5]), 
+                        sketch_full_gp$upper[5],
+                        sapply(DC_mpp, \(x) x$upper[5]),
+                        sketch_mpp$upper[5],
+                        sapply(DC_sparse_gp, \(x) x$upper[5]),
+                        sketch_sparse_gp$upper[5]))
> 
> #######################################################################
> 
> MSPE <- cvg_ind <- score <- numeric(15)
> 
> for (i in test_subjects) {
+   lowerPreds <- rbind(t(sapply(DC_full_gp, \(x) x$predictions[[i]][1, ])),
+ 		      sketch_full_gp$predictions[[i]][1, ],
+ 		      t(sapply(DC_mpp, \(x) x$predictions[[i]][1, ])),
+                       sketch_mpp$predictions[[i]][1, ],
+ 		      t(sapply(DC_sparse_gp, \(x) x$predictions[[i]][1, ])),
+                       sketch_sparse_gp$predictions[[i]][1, ])
+   upperPreds <- rbind(t(sapply(DC_full_gp, \(x) x$predictions[[i]][3, ])),
+                       sketch_full_gp$predictions[[i]][3, ],
+                       t(sapply(DC_mpp, \(x) x$predictions[[i]][3, ])),
+                       sketch_mpp$predictions[[i]][3, ],
+                       t(sapply(DC_sparse_gp, \(x) x$predictions[[i]][3, ])),
+                       sketch_sparse_gp$predictions[[i]][3, ])
+   pointPreds <- rbind(t(sapply(DC_full_gp, \(x) x$predictions[[i]][2, ])),
+                       sketch_full_gp$predictions[[i]][2, ],
+                       t(sapply(DC_mpp, \(x) x$predictions[[i]][2, ])),
+                       sketch_mpp$predictions[[i]][2, ],
+                       t(sapply(DC_sparse_gp, \(x) x$predictions[[i]][2, ])),
+                       sketch_sparse_gp$predictions[[i]][2, ])
+ 
+   MSPE <- MSPE + apply(pointPreds, 1, \(x) mean((x - test$Y[[i]])^2))
+   cvg_ind <- cvg_ind + sapply(1:15, \(j) lowerPreds[j, ] <= test$Y[[i]] & upperPreds[j, ] >= test$Y[[i]])
+   a <- .05
+   score <- score + sapply(1:15, \(j) mean( (upperPreds[j,] - lowerPreds[j,]) +
+                                    2/a * (lowerPreds[j,] - test$Y[[i]]) *
+                                    (test$Y[[i]] < lowerPreds[j,]) + 2/a *
+                                    (test$Y[[i]] - upperPreds[j,]) *
+                                    (test$Y[[i]] > upperPreds[j,]) ) )
+ }
> MSPE <- MSPE / length(test_subjects)
> cvg_ind <- cvg_ind / length(test_subjects)
> coverage <- apply(cvg_ind, 2, mean)
> score <- score / length(test_subjects)
> 
> df <- data.frame(model, splitType,
+                  sigma2Mean, sigma2Lower, sigma2Upper,
+                  tau2Mean, tau2Lower, tau2Upper,
+                  beta1Mean, beta1Lower, beta1Upper,
+                  beta2Mean, beta2Lower, beta2Upper,
+ 		 gammaMean, gammaLower, gammaUpper,
+                  MSPE, coverage, score)
> 
> df
       model  splitType sigma2Mean sigma2Lower sigma2Upper   tau2Mean
1    Full_GP Subdomains   2.067853    2.033695    2.105951 0.19570279
2    Full_GP Stratified   2.098221    2.066600    2.131505 0.19643863
3    Full_GP Multiplets   1.864116    1.834198    1.894991 0.26585692
4    Full_GP     Random   1.920248    1.890539    1.952332 0.20817181
5    Full_GP  Sketching   1.874984    1.843712    1.907253 0.27776883
6        MPP Subdomains   1.571130    1.541204    1.598915 0.22029449
7        MPP Stratified   1.739817    1.718641    1.759285 0.06287357
8        MPP Multiplets   1.831655    1.803588    1.860435 0.14853732
9        MPP     Random   1.884055    1.860225    1.907009 0.06055883
10       MPP  Sketching   1.886235    1.858254    1.910663 0.18805488
11 Sparse_GP Subdomains   2.079542    2.043759    2.117325 0.19673146
12 Sparse_GP Stratified   2.071390    2.038253    2.103168 0.19605151
13 Sparse_GP Multiplets   1.869614    1.836735    1.901279 0.28335792
14 Sparse_GP     Random   1.887516    1.856546    1.920803 0.24795675
15 Sparse_GP  Sketching   1.849726    1.815902    1.885744 0.33292099
    tau2Lower  tau2Upper beta1Mean beta1Lower beta1Upper  beta2Mean beta2Lower
1  0.18952632 0.20133639  1.962003   1.618942   2.302973 -0.9956741 -1.0105485
2  0.19025572 0.20290132  1.965959   1.863668   2.068198 -0.9933788 -1.0090785
3  0.25360780 0.27863620  1.968338   1.903539   2.035171 -0.9942174 -1.0153384
4  0.19544964 0.22018506  1.962867   1.897654   2.028178 -0.9870386 -1.0076525
5  0.26406656 0.29218352  1.958065   1.940337   1.976073 -0.9792003 -0.9866915
6  0.20635833 0.23558656  2.138999   1.921704   2.363314 -0.9909160 -1.0116363
7  0.05545733 0.07118615  1.920805   1.850507   1.991660 -0.9876196 -1.0085669
8  0.13480246 0.16255718  1.951780   1.892775   2.010730 -0.9864725 -1.0105934
9  0.05059899 0.07233350  1.944227   1.887050   1.999573 -0.9898935 -1.0130050
10 0.17869414 0.20115333  1.952547   1.935587   1.969138 -0.9748161 -0.9824059
11 0.19027161 0.20278472  1.971680   1.633715   2.308865 -0.9955943 -1.0103945
12 0.18988006 0.20257536  1.963661   1.865815   2.060938 -0.9926218 -1.0084073
13 0.27083378 0.29688100  1.968109   1.900226   2.036762 -0.9944209 -1.0145512
14 0.23485583 0.25997676  1.961270   1.895205   2.028418 -0.9864367 -1.0073382
15 0.31694182 0.34808262  1.953622   1.935871   1.970835 -0.9794733 -0.9868886
   beta2Upper gammaMean gammaLower gammaUpper     MSPE  coverage    score
1  -0.9808118  4.994346   4.985459   5.003349 2.295302 0.9346667 7.107190
2  -0.9776891  4.996620   4.993795   4.999456 2.298945 0.9386667 7.090218
3  -0.9733264  4.997526   4.995244   4.999796 2.302697 0.9286667 7.185970
4  -0.9667855  4.997499   4.995247   4.999720 2.294496 0.9286667 7.147122
5  -0.9718714  4.997849   4.997221   4.998500 2.300069 0.9276667 7.159945
6  -0.9702422  4.990544   4.984406   4.996494 2.269443 0.9136667 7.357481
7  -0.9657979  4.996694   4.994617   4.998738 2.310066 0.9103333 7.469199
8  -0.9628215  4.997480   4.995462   4.999522 2.298772 0.9193333 7.276858
9  -0.9671331  4.997387   4.995460   4.999333 2.300700 0.9180000 7.316828
10 -0.9670312  4.998562   4.997961   4.999173 2.300558 0.9243333 7.206726
11 -0.9805163  4.994474   4.985415   5.003287 2.296888 0.9350000 7.066464
12 -0.9769006  4.996485   4.993632   4.999326 2.289802 0.9350000 7.106556
13 -0.9729114  4.997576   4.995230   4.999888 2.289866 0.9293333 7.176822
14 -0.9657749  4.997640   4.995356   4.999978 2.296500 0.9270000 7.168124
15 -0.9718449  4.997913   4.997248   4.998536 2.299564 0.9323333 7.132645
> 
> proc.time()
   user  system elapsed 
 12.203   0.936  13.144 
