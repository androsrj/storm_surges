
R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> # Tables for paper
> DC_full_gp <- readRDS("results/d_and_c/full_gp/final_results.RDS")
> DC_mpp <- readRDS("results/d_and_c/mpp/final_results.RDS")
> DC_sparse_gp <- readRDS("results/d_and_c/sparse_gp/final_results.RDS")
> sketch_full_gp <- readRDS("results/sketching/full_gp/final_results.RDS")
> sketch_mpp <- readRDS("results/sketching/mpp/final_results.RDS")
> sketch_sparse_gp <- readRDS("results/sketching/sparse_gp/final_results.RDS")
> load("data/test.RData")
> 
> # Check acceptance rates first
> sapply(DC_full_gp, \(x) x$acc)
          [,1]    [,2]    [,3]    [,4]
sigma2 0.26768 0.24776 0.22624 0.21676
tau2   0.14028 0.15392 0.25876 0.26164
> sapply(DC_mpp, \(x) x$acc)
          [,1]    [,2]    [,3]    [,4]
sigma2 0.21704 0.18704 0.19328 0.19424
tau2   0.34008 0.66572 0.64016 0.63236
> sapply(DC_sparse_gp, \(x) x$acc)
          [,1]    [,2]    [,3]    [,4]
sigma2 0.26404 0.24812 0.21592 0.22108
tau2   0.13844 0.14432 0.32176 0.27232
> sketch_full_gp$acc
 sigma2    tau2 
0.17524 0.18036 
> sketch_mpp$acc
 sigma2    tau2 
0.15792 0.29844 
> sketch_sparse_gp$acc
 sigma2    tau2 
0.18048 0.19808 
> 
> test_subjects <- 6:10
> nTestSubj <- length(test_subjects)
> model <- rep(c("Full_GP", "MPP", "Sparse_GP"), each = 5)
> splitType <- rep(c("Subdomains", "Stratified", "Multiplets", "Random", "Sketching"), 3)
> 
> #######################################################################
> 
> sigma2Mean <- unname(c(sapply(DC_full_gp, \(x) x$means[1]), 
+                        sketch_full_gp$means[1],
+                        sapply(DC_mpp, \(x) x$means[1]),
+                        sketch_mpp$means[1],
+                        sapply(DC_sparse_gp, \(x) x$means[1]),
+                        sketch_sparse_gp$means[1]))
> 
> sigma2Lower <- unname(c(sapply(DC_full_gp, \(x) x$lower[1]), 
+                         sketch_full_gp$lower[1],
+                         sapply(DC_mpp, \(x) x$lower[1]),
+                         sketch_mpp$lower[1],
+                         sapply(DC_sparse_gp, \(x) x$lower[1]),
+                         sketch_sparse_gp$lower[1]))
> 
> sigma2Upper <- unname(c(sapply(DC_full_gp, \(x) x$upper[1]), 
+                         sketch_full_gp$upper[1],
+                         sapply(DC_mpp, \(x) x$upper[1]),
+                         sketch_mpp$upper[1],
+                         sapply(DC_sparse_gp, \(x) x$upper[1]),
+                         sketch_sparse_gp$upper[1]))
> 
> #######################################################################
> 
> tau2Mean <- unname(c(sapply(DC_full_gp, \(x) x$means[2]), 
+                      sketch_full_gp$means[2],
+                      sapply(DC_mpp, \(x) x$means[2]),
+                      sketch_mpp$means[2],
+                      sapply(DC_sparse_gp, \(x) x$means[2]),
+                      sketch_sparse_gp$means[2]))
> 
> tau2Lower <- unname(c(sapply(DC_full_gp, \(x) x$lower[2]), 
+                       sketch_full_gp$lower[2],
+                       sapply(DC_mpp, \(x) x$lower[2]),
+                       sketch_mpp$lower[2],
+                       sapply(DC_sparse_gp, \(x) x$lower[2]),
+                       sketch_sparse_gp$lower[2]))
> 
> tau2Upper <- unname(c(sapply(DC_full_gp, \(x) x$upper[2]), 
+                       sketch_full_gp$upper[2],
+                       sapply(DC_mpp, \(x) x$upper[2]),
+                       sketch_mpp$upper[2],
+                       sapply(DC_sparse_gp, \(x) x$upper[2]),
+                       sketch_sparse_gp$upper[2]))
> 
> #######################################################################
> 
> gammaMean <- unname(c(sapply(DC_full_gp, \(x) x$means[3]), 
+                       sketch_full_gp$means[3],
+                       sapply(DC_mpp, \(x) x$means[3]),
+                       sketch_mpp$means[3],
+                       sapply(DC_sparse_gp, \(x) x$means[3]),
+                       sketch_sparse_gp$means[3]))
> 
> gammaLower <- unname(c(sapply(DC_full_gp, \(x) x$lower[3]), 
+                        sketch_full_gp$lower[3],
+                        sapply(DC_mpp, \(x) x$lower[3]),
+                        sketch_mpp$lower[3],
+                        sapply(DC_sparse_gp, \(x) x$lower[3]),
+                        sketch_sparse_gp$lower[3]))
> 
> gammaUpper <- unname(c(sapply(DC_full_gp, \(x) x$upper[3]), 
+                        sketch_full_gp$upper[3],
+                        sapply(DC_mpp, \(x) x$upper[3]),
+                        sketch_mpp$upper[3],
+                        sapply(DC_sparse_gp, \(x) x$upper[3]),
+                        sketch_sparse_gp$upper[3]))
> 
> #######################################################################
> 
> beta1Mean <- unname(c(sapply(DC_full_gp, \(x) x$means[4]), 
+                       sketch_full_gp$means[4],
+                       sapply(DC_mpp, \(x) x$means[4]),
+                       sketch_mpp$means[4],
+                       sapply(DC_sparse_gp, \(x) x$means[4]),
+                       sketch_sparse_gp$means[4]))
> 
> beta1Lower <- unname(c(sapply(DC_full_gp, \(x) x$lower[4]), 
+                        sketch_full_gp$lower[4],
+                        sapply(DC_mpp, \(x) x$lower[4]),
+                        sketch_mpp$lower[4],
+                        sapply(DC_sparse_gp, \(x) x$lower[4]),
+                        sketch_sparse_gp$lower[4]))
> 
> beta1Upper <- unname(c(sapply(DC_full_gp, \(x) x$upper[4]), 
+                        sketch_full_gp$upper[4],
+                        sapply(DC_mpp, \(x) x$upper[4]),
+                        sketch_mpp$upper[4],
+                        sapply(DC_sparse_gp, \(x) x$upper[4]),
+                        sketch_sparse_gp$upper[4]))
> 
> #######################################################################
> 
> beta2Mean <- unname(c(sapply(DC_full_gp, \(x) x$means[5]), 
+                       sketch_full_gp$means[5],
+                       sapply(DC_mpp, \(x) x$means[5]),
+                       sketch_mpp$means[5],
+                       sapply(DC_sparse_gp, \(x) x$means[5]),
+                       sketch_sparse_gp$means[5]))
> 
> beta2Lower <- unname(c(sapply(DC_full_gp, \(x) x$lower[5]), 
+                        sketch_full_gp$lower[5],
+                        sapply(DC_mpp, \(x) x$lower[5]),
+                        sketch_mpp$lower[5],
+                        sapply(DC_sparse_gp, \(x) x$lower[5]),
+                        sketch_sparse_gp$lower[5]))
> 
> beta2Upper <- unname(c(sapply(DC_full_gp, \(x) x$upper[5]), 
+                        sketch_full_gp$upper[5],
+                        sapply(DC_mpp, \(x) x$upper[5]),
+                        sketch_mpp$upper[5],
+                        sapply(DC_sparse_gp, \(x) x$upper[5]),
+                        sketch_sparse_gp$upper[5]))
> 
> #######################################################################
> 
> MSPE <- cvg_ind <- score <- numeric(15)
> 
> for (i in 1:nTestSubj) {
+   lowerPreds <- rbind(t(sapply(DC_full_gp, \(x) x$predictions[[i]][1, ])),
+ 		      sketch_full_gp$predictions[[i]][1, ],
+ 		      t(sapply(DC_mpp, \(x) x$predictions[[i]][1, ])),
+                       sketch_mpp$predictions[[i]][1, ],
+ 		      t(sapply(DC_sparse_gp, \(x) x$predictions[[i]][1, ])),
+                       sketch_sparse_gp$predictions[[i]][1, ])
+   upperPreds <- rbind(t(sapply(DC_full_gp, \(x) x$predictions[[i]][3, ])),
+                       sketch_full_gp$predictions[[i]][3, ],
+                       t(sapply(DC_mpp, \(x) x$predictions[[i]][3, ])),
+                       sketch_mpp$predictions[[i]][3, ],
+                       t(sapply(DC_sparse_gp, \(x) x$predictions[[i]][3, ])),
+                       sketch_sparse_gp$predictions[[i]][3, ])
+   pointPreds <- rbind(t(sapply(DC_full_gp, \(x) x$predictions[[i]][2, ])),
+                       sketch_full_gp$predictions[[i]][2, ],
+                       t(sapply(DC_mpp, \(x) x$predictions[[i]][2, ])),
+                       sketch_mpp$predictions[[i]][2, ],
+                       t(sapply(DC_sparse_gp, \(x) x$predictions[[i]][2, ])),
+                       sketch_sparse_gp$predictions[[i]][2, ])
+ 
+   MSPE <- MSPE + apply(pointPreds, 1, \(x) mean((x - test$Y[[i]])^2))
+   cvg_ind <- cvg_ind + sapply(1:15, \(j) lowerPreds[j, ] <= test$Y[[i]] & upperPreds[j, ] >= test$Y[[i]])
+   a <- .05
+   score <- score + sapply(1:15, \(j) mean( (upperPreds[j,] - lowerPreds[j,]) +
+                                    2/a * (lowerPreds[j,] - test$Y[[i]]) *
+                                    (test$Y[[i]] < lowerPreds[j,]) + 2/a *
+                                    (test$Y[[i]] - upperPreds[j,]) *
+                                    (test$Y[[i]] > upperPreds[j,]) ) )
+ }
> MSPE <- MSPE / length(test_subjects)
> cvg_ind <- cvg_ind / length(test_subjects)
> coverage <- apply(cvg_ind, 2, mean)
> score <- score / length(test_subjects)
> 
> df <- data.frame(model, splitType,
+                  sigma2Mean, sigma2Lower, sigma2Upper,
+                  tau2Mean, tau2Lower, tau2Upper,
+                  beta1Mean, beta1Lower, beta1Upper,
+                  beta2Mean, beta2Lower, beta2Upper,
+ 		 gammaMean, gammaLower, gammaUpper,
+                  MSPE, coverage, score)
> 
> df
       model  splitType sigma2Mean sigma2Lower sigma2Upper   tau2Mean
1    Full_GP Subdomains   2.080294    2.042275    2.118341 0.21096666
2    Full_GP Stratified   1.965069    1.934656    1.995261 0.20444326
3    Full_GP Multiplets   2.059876    2.027887    2.092492 0.21701936
4    Full_GP     Random   2.035350    2.005427    2.066556 0.18738884
5    Full_GP  Sketching   2.035630    2.001312    2.069765 0.28442514
6        MPP Subdomains   1.619927    1.591984    1.648527 0.16246352
7        MPP Stratified   1.753994    1.736993    1.770948 0.02386548
8        MPP Multiplets   2.065196    2.038750    2.091838 0.05653807
9        MPP     Random   2.030287    2.005055    2.055123 0.05901483
10       MPP  Sketching   2.111276    2.082958    2.141893 0.13384119
11 Sparse_GP Subdomains   1.841468    1.810273    1.873674 0.20107958
12 Sparse_GP Stratified   2.042025    2.010308    2.073351 0.21776256
13 Sparse_GP Multiplets   2.041156    2.011788    2.070211 0.18487042
14 Sparse_GP     Random   2.066546    2.034481    2.097510 0.20466372
15 Sparse_GP  Sketching   2.048812    2.014977    2.080474 0.24912921
    tau2Lower  tau2Upper beta1Mean beta1Lower beta1Upper  beta2Mean beta2Lower
1  0.20462828 0.21708627  1.760687   1.392994   2.136163 -0.9992279 -1.0144317
2  0.19835211 0.21098151  1.988370   1.896095   2.083266 -0.9983689 -1.0145724
3  0.20475060 0.22935109  1.998734   1.927594   2.068230 -0.9904088 -1.0110620
4  0.17637533 0.19851119  2.003847   1.937909   2.073447 -0.9933368 -1.0137102
5  0.27072335 0.29882489  1.998915   1.980923   2.017605 -0.9826908 -0.9905676
6  0.14858746 0.17665218  1.791658   1.563185   2.026022 -0.9907273 -1.0109466
7  0.01959275 0.02879602  2.086304   2.021572   2.150433 -0.9923929 -1.0134976
8  0.04624643 0.06865562  2.063752   2.001278   2.125952 -0.9873335 -1.0114914
9  0.04927635 0.06885528  2.069389   2.008083   2.132306 -0.9899910 -1.0137085
10 0.12259766 0.14388060  1.999701   1.982414   2.016952 -0.9801526 -0.9881123
11 0.19519894 0.20707452  1.790882   1.477412   2.096784 -0.9986010 -1.0134928
12 0.21173700 0.22423044  1.986236   1.887272   2.087051 -0.9977744 -1.0140423
13 0.17386735 0.19620587  2.005732   1.938824   2.073799 -0.9912529 -1.0117272
14 0.19390683 0.21588018  1.998732   1.926455   2.072263 -0.9950314 -1.0154364
15 0.23657748 0.26313514  2.029652   2.011310   2.047184 -0.9850437 -0.9926972
   beta2Upper gammaMean gammaLower gammaUpper     MSPE coverage    score
1  -0.9840033  5.000268   4.991004   5.009373 2.424293   0.9486 6.989852
2  -0.9820552  4.998277   4.995665   5.000892 2.305076   0.9420 6.881609
3  -0.9700352  4.997588   4.995080   5.000060 2.302272   0.9484 6.873043
4  -0.9729985  4.997744   4.995318   5.000122 2.300990   0.9454 6.876739
5  -0.9748293  4.997855   4.997194   4.998533 2.300743   0.9516 6.866520
6  -0.9709816  4.997647   4.991666   5.003422 2.404156   0.9084 7.269073
7  -0.9712895  4.998841   4.996843   5.000850 2.282004   0.9168 7.076225
8  -0.9633039  4.997684   4.995483   4.999912 2.288182   0.9404 6.880873
9  -0.9660193  4.997966   4.995734   5.000201 2.285968   0.9374 6.880226
10 -0.9719660  4.997329   4.996686   4.997976 2.302112   0.9452 6.872561
11 -0.9838190  4.999799   4.992129   5.007293 2.399017   0.9322 7.028409
12 -0.9814343  4.998138   4.995307   5.001074 2.305105   0.9476 6.866347
13 -0.9703956  4.997584   4.995203   4.999934 2.299529   0.9446 6.878851
14 -0.9748387  4.997794   4.995196   5.000349 2.301691   0.9476 6.873285
15 -0.9774208  4.998206   4.997546   4.998876 2.292964   0.9490 6.857511
> 
> proc.time()
   user  system elapsed 
 16.259   1.429  18.074 
