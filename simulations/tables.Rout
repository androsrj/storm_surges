
R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> # Tables for paper
> DC_full_gp <- readRDS("results/d_and_c/full_gp_results.RDS")
> DC_mpp <- readRDS("results/d_and_c/mpp_results.RDS")
> DC_sparse_gp <- readRDS("results/d_and_c/sparse_gp_results.RDS")
> sketch_full_gp <- readRDS("results/sketching/full_gp_results.RDS")
> sketch_mpp <- readRDS("results/sketching/mpp_results.RDS")
> sketch_sparse_gp <- readRDS("results/sketching/sparse_gp_results.RDS")
> load("data/test.RData")
> 
> # Check acceptance rates first
> sapply(DC_full_gp, \(x) x$acc)
[[1]]
 sigma2    tau2 
0.27060 0.13272 

[[2]]
 sigma2    tau2 
0.25512 0.14980 

[[3]]
NULL

[[4]]
NULL

> sapply(DC_mpp, \(x) x$acc)
[[1]]
 sigma2    tau2 
0.21552 0.34852 

[[2]]
 sigma2    tau2 
0.18904 0.63692 

[[3]]
NULL

[[4]]
NULL

> sapply(DC_sparse_gp, \(x) x$acc)
[[1]]
 sigma2    tau2 
0.26884 0.13596 

[[2]]
 sigma2    tau2 
0.24716 0.15836 

[[3]]
NULL

[[4]]
NULL

> sketch_full_gp$acc
 sigma2    tau2 
0.17600 0.18044 
> sketch_mpp$acc
 sigma2    tau2 
0.16196 0.29564 
> sketch_sparse_gp$acc
 sigma2    tau2 
0.17088 0.21612 
> 
> test_subjects <- 6:10
> nTestSubj <- length(test_subjects)
> model <- rep(c("Full_GP", "MPP", "Sparse_GP"), each = 5)
> splitType <- rep(c("Subdomains", "Stratified", "Multiplets", "Random", "Sketching"), 3)
> 
> #######################################################################
> 
> sigma2Mean <- unname(c(sapply(DC_full_gp, \(x) x$means[1]), 
+                        sketch_full_gp$means[1],
+                        sapply(DC_mpp, \(x) x$means[1]),
+                        sketch_mpp$means[1],
+                        sapply(DC_sparse_gp, \(x) x$means[1]),
+                        sketch_sparse_gp$means[1]))
> 
> sigma2Lower <- unname(c(sapply(DC_full_gp, \(x) x$lower[1]), 
+                         sketch_full_gp$lower[1],
+                         sapply(DC_mpp, \(x) x$lower[1]),
+                         sketch_mpp$lower[1],
+                         sapply(DC_sparse_gp, \(x) x$lower[1]),
+                         sketch_sparse_gp$lower[1]))
> 
> sigma2Upper <- unname(c(sapply(DC_full_gp, \(x) x$upper[1]), 
+                         sketch_full_gp$upper[1],
+                         sapply(DC_mpp, \(x) x$upper[1]),
+                         sketch_mpp$upper[1],
+                         sapply(DC_sparse_gp, \(x) x$upper[1]),
+                         sketch_sparse_gp$upper[1]))
> 
> #######################################################################
> 
> tau2Mean <- unname(c(sapply(DC_full_gp, \(x) x$means[2]), 
+                      sketch_full_gp$means[2],
+                      sapply(DC_mpp, \(x) x$means[2]),
+                      sketch_mpp$means[2],
+                      sapply(DC_sparse_gp, \(x) x$means[2]),
+                      sketch_sparse_gp$means[2]))
> 
> tau2Lower <- unname(c(sapply(DC_full_gp, \(x) x$lower[2]), 
+                       sketch_full_gp$lower[2],
+                       sapply(DC_mpp, \(x) x$lower[2]),
+                       sketch_mpp$lower[2],
+                       sapply(DC_sparse_gp, \(x) x$lower[2]),
+                       sketch_sparse_gp$lower[2]))
> 
> tau2Upper <- unname(c(sapply(DC_full_gp, \(x) x$upper[2]), 
+                       sketch_full_gp$upper[2],
+                       sapply(DC_mpp, \(x) x$upper[2]),
+                       sketch_mpp$upper[2],
+                       sapply(DC_sparse_gp, \(x) x$upper[2]),
+                       sketch_sparse_gp$upper[2]))
> 
> #######################################################################
> 
> gammaMean <- unname(c(sapply(DC_full_gp, \(x) x$means[3]), 
+                       sketch_full_gp$means[3],
+                       sapply(DC_mpp, \(x) x$means[3]),
+                       sketch_mpp$means[3],
+                       sapply(DC_sparse_gp, \(x) x$means[3]),
+                       sketch_sparse_gp$means[3]))
> 
> gammaLower <- unname(c(sapply(DC_full_gp, \(x) x$lower[3]), 
+                        sketch_full_gp$lower[3],
+                        sapply(DC_mpp, \(x) x$lower[3]),
+                        sketch_mpp$lower[3],
+                        sapply(DC_sparse_gp, \(x) x$lower[3]),
+                        sketch_sparse_gp$lower[3]))
> 
> gammaUpper <- unname(c(sapply(DC_full_gp, \(x) x$upper[3]), 
+                        sketch_full_gp$upper[3],
+                        sapply(DC_mpp, \(x) x$upper[3]),
+                        sketch_mpp$upper[3],
+                        sapply(DC_sparse_gp, \(x) x$upper[3]),
+                        sketch_sparse_gp$upper[3]))
> 
> #######################################################################
> 
> beta1Mean <- unname(c(sapply(DC_full_gp, \(x) x$means[4]), 
+                       sketch_full_gp$means[4],
+                       sapply(DC_mpp, \(x) x$means[4]),
+                       sketch_mpp$means[4],
+                       sapply(DC_sparse_gp, \(x) x$means[4]),
+                       sketch_sparse_gp$means[4]))
> 
> beta1Lower <- unname(c(sapply(DC_full_gp, \(x) x$lower[4]), 
+                        sketch_full_gp$lower[4],
+                        sapply(DC_mpp, \(x) x$lower[4]),
+                        sketch_mpp$lower[4],
+                        sapply(DC_sparse_gp, \(x) x$lower[4]),
+                        sketch_sparse_gp$lower[4]))
> 
> beta1Upper <- unname(c(sapply(DC_full_gp, \(x) x$upper[4]), 
+                        sketch_full_gp$upper[4],
+                        sapply(DC_mpp, \(x) x$upper[4]),
+                        sketch_mpp$upper[4],
+                        sapply(DC_sparse_gp, \(x) x$upper[4]),
+                        sketch_sparse_gp$upper[4]))
> 
> #######################################################################
> 
> beta2Mean <- unname(c(sapply(DC_full_gp, \(x) x$means[5]), 
+                       sketch_full_gp$means[5],
+                       sapply(DC_mpp, \(x) x$means[5]),
+                       sketch_mpp$means[5],
+                       sapply(DC_sparse_gp, \(x) x$means[5]),
+                       sketch_sparse_gp$means[5]))
> 
> beta2Lower <- unname(c(sapply(DC_full_gp, \(x) x$lower[5]), 
+                        sketch_full_gp$lower[5],
+                        sapply(DC_mpp, \(x) x$lower[5]),
+                        sketch_mpp$lower[5],
+                        sapply(DC_sparse_gp, \(x) x$lower[5]),
+                        sketch_sparse_gp$lower[5]))
> 
> beta2Upper <- unname(c(sapply(DC_full_gp, \(x) x$upper[5]), 
+                        sketch_full_gp$upper[5],
+                        sapply(DC_mpp, \(x) x$upper[5]),
+                        sketch_mpp$upper[5],
+                        sapply(DC_sparse_gp, \(x) x$upper[5]),
+                        sketch_sparse_gp$upper[5]))
> 
> #######################################################################
> 
> MSPE <- cvg_ind <- score <- numeric(15)
> 
> for (i in 1:nTestSubj) {
+   lowerPreds <- rbind(t(sapply(DC_full_gp, \(x) x$predictions[[i]][1, ])),
+ 		      sketch_full_gp$predictions[[i]][1, ],
+ 		      t(sapply(DC_mpp, \(x) x$predictions[[i]][1, ])),
+                       sketch_mpp$predictions[[i]][1, ],
+ 		      t(sapply(DC_sparse_gp, \(x) x$predictions[[i]][1, ])),
+                       sketch_sparse_gp$predictions[[i]][1, ])
+   upperPreds <- rbind(t(sapply(DC_full_gp, \(x) x$predictions[[i]][3, ])),
+                       sketch_full_gp$predictions[[i]][3, ],
+                       t(sapply(DC_mpp, \(x) x$predictions[[i]][3, ])),
+                       sketch_mpp$predictions[[i]][3, ],
+                       t(sapply(DC_sparse_gp, \(x) x$predictions[[i]][3, ])),
+                       sketch_sparse_gp$predictions[[i]][3, ])
+   pointPreds <- rbind(t(sapply(DC_full_gp, \(x) x$predictions[[i]][2, ])),
+                       sketch_full_gp$predictions[[i]][2, ],
+                       t(sapply(DC_mpp, \(x) x$predictions[[i]][2, ])),
+                       sketch_mpp$predictions[[i]][2, ],
+                       t(sapply(DC_sparse_gp, \(x) x$predictions[[i]][2, ])),
+                       sketch_sparse_gp$predictions[[i]][2, ])
+ 
+   MSPE <- MSPE + apply(pointPreds, 1, \(x) mean((x - test$Y[[i]])^2))
+   cvg_ind <- cvg_ind + sapply(1:15, \(j) lowerPreds[j, ] <= test$Y[[i]] & upperPreds[j, ] >= test$Y[[i]])
+   a <- .05
+   score <- score + sapply(1:15, \(j) mean( (upperPreds[j,] - lowerPreds[j,]) +
+                                    2/a * (lowerPreds[j,] - test$Y[[i]]) *
+                                    (test$Y[[i]] < lowerPreds[j,]) + 2/a *
+                                    (test$Y[[i]] - upperPreds[j,]) *
+                                    (test$Y[[i]] > upperPreds[j,]) ) )
+ }
Error in x - test$Y[[i]] : non-numeric argument to binary operator
Calls: apply -> FUN -> mean
In addition: Warning messages:
1: In rbind(t(sapply(DC_full_gp, function(x) x$predictions[[i]][1,  :
  number of columns of result is not a multiple of vector length (arg 2)
2: In rbind(t(sapply(DC_full_gp, function(x) x$predictions[[i]][3,  :
  number of columns of result is not a multiple of vector length (arg 2)
3: In rbind(t(sapply(DC_full_gp, function(x) x$predictions[[i]][2,  :
  number of columns of result is not a multiple of vector length (arg 2)
Execution halted
