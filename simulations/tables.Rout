
R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> # Tables for paper
> DC_full_gp <- readRDS("results/d_and_c/full_gp_results.RDS")
> DC_mpp <- readRDS("results/d_and_c/mpp_results.RDS")
> DC_sparse_gp <- readRDS("results/d_and_c/sparse_gp_results.RDS")
> sketch_full_gp <- readRDS("results/sketching/full_gp_results.RDS")
> sketch_mpp <- readRDS("results/sketching/mpp_results.RDS")
> sketch_sparse_gp <- readRDS("results/sketching/sparse_gp_results.RDS")
> load("data/test.RData")
> 
> # Check acceptance rates first
> sapply(DC_full_gp, \(x) x$acc)
          [,1]    [,2]    [,3]    [,4]
sigma2 0.26728 0.24456 0.22224 0.22140
tau2   0.13820 0.15840 0.25388 0.25484
> sapply(DC_mpp, \(x) x$acc)
          [,1]    [,2]    [,3]    [,4]
sigma2 0.22016 0.19312 0.20084 0.19532
tau2   0.30384 0.60168 0.58504 0.68644
> sapply(DC_sparse_gp, \(x) x$acc)
          [,1]    [,2]    [,3]    [,4]
sigma2 0.26536 0.25484 0.22536 0.21552
tau2   0.13548 0.15188 0.25772 0.28380
> sketch_full_gp$acc
 sigma2    tau2 
0.16864 0.21748 
> sketch_mpp$acc
 sigma2    tau2 
0.15532 0.31216 
> sketch_sparse_gp$acc
 sigma2    tau2 
0.16836 0.23528 
> 
> test_subjects <- 6:10
> nTestSubj <- length(test_subjects)
> model <- rep(c("Full_GP", "MPP", "Sparse_GP"), each = 5)
> splitType <- rep(c("Subdomains", "Stratified", "Multiplets", "Random", "Sketching"), 3)
> 
> #######################################################################
> 
> sigma2Mean <- unname(c(sapply(DC_full_gp, \(x) x$means[1]), 
+                        sketch_full_gp$means[1],
+                        sapply(DC_mpp, \(x) x$means[1]),
+                        sketch_mpp$means[1],
+                        sapply(DC_sparse_gp, \(x) x$means[1]),
+                        sketch_sparse_gp$means[1]))
> 
> sigma2Lower <- unname(c(sapply(DC_full_gp, \(x) x$lower[1]), 
+                         sketch_full_gp$lower[1],
+                         sapply(DC_mpp, \(x) x$lower[1]),
+                         sketch_mpp$lower[1],
+                         sapply(DC_sparse_gp, \(x) x$lower[1]),
+                         sketch_sparse_gp$lower[1]))
> 
> sigma2Upper <- unname(c(sapply(DC_full_gp, \(x) x$upper[1]), 
+                         sketch_full_gp$upper[1],
+                         sapply(DC_mpp, \(x) x$upper[1]),
+                         sketch_mpp$upper[1],
+                         sapply(DC_sparse_gp, \(x) x$upper[1]),
+                         sketch_sparse_gp$upper[1]))
> 
> #######################################################################
> 
> tau2Mean <- unname(c(sapply(DC_full_gp, \(x) x$means[2]), 
+                      sketch_full_gp$means[2],
+                      sapply(DC_mpp, \(x) x$means[2]),
+                      sketch_mpp$means[2],
+                      sapply(DC_sparse_gp, \(x) x$means[2]),
+                      sketch_sparse_gp$means[2]))
> 
> tau2Lower <- unname(c(sapply(DC_full_gp, \(x) x$lower[2]), 
+                       sketch_full_gp$lower[2],
+                       sapply(DC_mpp, \(x) x$lower[2]),
+                       sketch_mpp$lower[2],
+                       sapply(DC_sparse_gp, \(x) x$lower[2]),
+                       sketch_sparse_gp$lower[2]))
> 
> tau2Upper <- unname(c(sapply(DC_full_gp, \(x) x$upper[2]), 
+                       sketch_full_gp$upper[2],
+                       sapply(DC_mpp, \(x) x$upper[2]),
+                       sketch_mpp$upper[2],
+                       sapply(DC_sparse_gp, \(x) x$upper[2]),
+                       sketch_sparse_gp$upper[2]))
> 
> #######################################################################
> 
> gammaMean <- unname(c(sapply(DC_full_gp, \(x) x$means[3]), 
+                       sketch_full_gp$means[3],
+                       sapply(DC_mpp, \(x) x$means[3]),
+                       sketch_mpp$means[3],
+                       sapply(DC_sparse_gp, \(x) x$means[3]),
+                       sketch_sparse_gp$means[3]))
> 
> gammaLower <- unname(c(sapply(DC_full_gp, \(x) x$lower[3]), 
+                        sketch_full_gp$lower[3],
+                        sapply(DC_mpp, \(x) x$lower[3]),
+                        sketch_mpp$lower[3],
+                        sapply(DC_sparse_gp, \(x) x$lower[3]),
+                        sketch_sparse_gp$lower[3]))
> 
> gammaUpper <- unname(c(sapply(DC_full_gp, \(x) x$upper[3]), 
+                        sketch_full_gp$upper[3],
+                        sapply(DC_mpp, \(x) x$upper[3]),
+                        sketch_mpp$upper[3],
+                        sapply(DC_sparse_gp, \(x) x$upper[3]),
+                        sketch_sparse_gp$upper[3]))
> 
> #######################################################################
> 
> beta1Mean <- unname(c(sapply(DC_full_gp, \(x) x$means[4]), 
+                       sketch_full_gp$means[4],
+                       sapply(DC_mpp, \(x) x$means[4]),
+                       sketch_mpp$means[4],
+                       sapply(DC_sparse_gp, \(x) x$means[4]),
+                       sketch_sparse_gp$means[4]))
> 
> beta1Lower <- unname(c(sapply(DC_full_gp, \(x) x$lower[4]), 
+                        sketch_full_gp$lower[4],
+                        sapply(DC_mpp, \(x) x$lower[4]),
+                        sketch_mpp$lower[4],
+                        sapply(DC_sparse_gp, \(x) x$lower[4]),
+                        sketch_sparse_gp$lower[4]))
> 
> beta1Upper <- unname(c(sapply(DC_full_gp, \(x) x$upper[4]), 
+                        sketch_full_gp$upper[4],
+                        sapply(DC_mpp, \(x) x$upper[4]),
+                        sketch_mpp$upper[4],
+                        sapply(DC_sparse_gp, \(x) x$upper[4]),
+                        sketch_sparse_gp$upper[4]))
> 
> #######################################################################
> 
> beta2Mean <- unname(c(sapply(DC_full_gp, \(x) x$means[5]), 
+                       sketch_full_gp$means[5],
+                       sapply(DC_mpp, \(x) x$means[5]),
+                       sketch_mpp$means[5],
+                       sapply(DC_sparse_gp, \(x) x$means[5]),
+                       sketch_sparse_gp$means[5]))
> 
> beta2Lower <- unname(c(sapply(DC_full_gp, \(x) x$lower[5]), 
+                        sketch_full_gp$lower[5],
+                        sapply(DC_mpp, \(x) x$lower[5]),
+                        sketch_mpp$lower[5],
+                        sapply(DC_sparse_gp, \(x) x$lower[5]),
+                        sketch_sparse_gp$lower[5]))
> 
> beta2Upper <- unname(c(sapply(DC_full_gp, \(x) x$upper[5]), 
+                        sketch_full_gp$upper[5],
+                        sapply(DC_mpp, \(x) x$upper[5]),
+                        sketch_mpp$upper[5],
+                        sapply(DC_sparse_gp, \(x) x$upper[5]),
+                        sketch_sparse_gp$upper[5]))
> 
> #######################################################################
> 
> MSPE <- cvg_ind <- score <- numeric(15)
> 
> for (i in 1:nTestSubj) {
+   lowerPreds <- rbind(t(sapply(DC_full_gp, \(x) x$predictions[[i]][1, ])),
+ 		      sketch_full_gp$predictions[[i]][1, ],
+ 		      t(sapply(DC_mpp, \(x) x$predictions[[i]][1, ])),
+                       sketch_mpp$predictions[[i]][1, ],
+ 		      t(sapply(DC_sparse_gp, \(x) x$predictions[[i]][1, ])),
+                       sketch_sparse_gp$predictions[[i]][1, ])
+   upperPreds <- rbind(t(sapply(DC_full_gp, \(x) x$predictions[[i]][3, ])),
+                       sketch_full_gp$predictions[[i]][3, ],
+                       t(sapply(DC_mpp, \(x) x$predictions[[i]][3, ])),
+                       sketch_mpp$predictions[[i]][3, ],
+                       t(sapply(DC_sparse_gp, \(x) x$predictions[[i]][3, ])),
+                       sketch_sparse_gp$predictions[[i]][3, ])
+   pointPreds <- rbind(t(sapply(DC_full_gp, \(x) x$predictions[[i]][2, ])),
+                       sketch_full_gp$predictions[[i]][2, ],
+                       t(sapply(DC_mpp, \(x) x$predictions[[i]][2, ])),
+                       sketch_mpp$predictions[[i]][2, ],
+                       t(sapply(DC_sparse_gp, \(x) x$predictions[[i]][2, ])),
+                       sketch_sparse_gp$predictions[[i]][2, ])
+ 
+   MSPE <- MSPE + apply(pointPreds, 1, \(x) mean((x - test$Y[[i]])^2))
+   cvg_ind <- cvg_ind + sapply(1:15, \(j) lowerPreds[j, ] <= test$Y[[i]] & upperPreds[j, ] >= test$Y[[i]])
+   a <- .05
+   score <- score + sapply(1:15, \(j) mean( (upperPreds[j,] - lowerPreds[j,]) +
+                                    2/a * (lowerPreds[j,] - test$Y[[i]]) *
+                                    (test$Y[[i]] < lowerPreds[j,]) + 2/a *
+                                    (test$Y[[i]] - upperPreds[j,]) *
+                                    (test$Y[[i]] > upperPreds[j,]) ) )
+ }
> MSPE <- MSPE / length(test_subjects)
> cvg_ind <- cvg_ind / length(test_subjects)
> coverage <- apply(cvg_ind, 2, mean)
> score <- score / length(test_subjects)
> 
> df <- data.frame(model, splitType,
+                  sigma2Mean, sigma2Lower, sigma2Upper,
+                  tau2Mean, tau2Lower, tau2Upper,
+                  beta1Mean, beta1Lower, beta1Upper,
+                  beta2Mean, beta2Lower, beta2Upper,
+ 		 gammaMean, gammaLower, gammaUpper,
+                  MSPE, coverage, score)
> 
> df
       model  splitType sigma2Mean sigma2Lower sigma2Upper   tau2Mean
1    Full_GP Subdomains   2.125652    2.089131    2.162936 0.21358474
2    Full_GP Stratified   1.935842    1.907427    1.963749 0.20079983
3    Full_GP Multiplets   2.098308    2.065211    2.132822 0.21294839
4    Full_GP     Random   1.981827    1.951925    2.011906 0.20862048
5    Full_GP  Sketching   2.165149    2.131158    2.202134 0.20719566
6        MPP Subdomains   1.618590    1.590891    1.646507 0.18424077
7        MPP Stratified   1.804637    1.786166    1.824773 0.04605129
8        MPP Multiplets   2.079337    2.050003    2.107327 0.08464352
9        MPP     Random   1.991094    1.970233    2.012014 0.03314762
10       MPP  Sketching   2.129835    2.100243    2.163424 0.11332037
11 Sparse_GP Subdomains   2.139585    2.102696    2.178085 0.21352257
12 Sparse_GP Stratified   1.990285    1.959084    2.022200 0.20841103
13 Sparse_GP Multiplets   2.080554    2.049532    2.111283 0.21520193
14 Sparse_GP     Random   1.984528    1.955384    2.013878 0.20131216
15 Sparse_GP  Sketching   2.135588    2.103354    2.166432 0.19215194
    tau2Lower  tau2Upper beta1Mean beta1Lower beta1Upper  beta2Mean beta2Lower
1  0.20768240 0.21933114  1.765101   1.392776   2.136421 -0.9989834 -1.0140418
2  0.19483387 0.20718763  1.990168   1.898457   2.081033 -0.9993757 -1.0156265
3  0.20076890 0.22469738  2.009197   1.935906   2.082344 -0.9921824 -1.0129511
4  0.19780891 0.21989689  2.000347   1.932365   2.068005 -0.9822099 -1.0034433
5  0.19411295 0.22043579  1.995285   1.976672   2.014190 -0.9809390 -0.9885431
6  0.17079848 0.19784126  1.792283   1.552273   2.034451 -0.9960512 -1.0162551
7  0.03973002 0.05256902  1.936531   1.861630   2.009216 -0.9946296 -1.0157190
8  0.07292175 0.09736876  1.981198   1.913790   2.049158 -0.9906505 -1.0142106
9  0.02632163 0.04131300  1.977947   1.920507   2.034455 -0.9850103 -1.0080808
10 0.10185441 0.12522969  2.014840   1.997100   2.032261 -0.9533615 -0.9615888
11 0.20740764 0.21914644  1.760207   1.374699   2.140802 -0.9988480 -1.0140838
12 0.20200547 0.21474603  1.990278   1.895175   2.083443 -0.9994185 -1.0154807
13 0.20402799 0.22672587  2.006936   1.934477   2.077553 -0.9926399 -1.0132602
14 0.19012822 0.21271689  2.001425   1.937002   2.067491 -0.9830359 -1.0037727
15 0.18105468 0.20422929  1.968660   1.949811   1.986846 -0.9796971 -0.9870997
   beta2Upper gammaMean gammaLower gammaUpper     MSPE coverage    score
1  -0.9840040  4.999866   4.989791   5.009715 2.421126   0.9512 6.983844
2  -0.9832693  4.998267   4.995811   5.000796 2.304838   0.9394 6.889635
3  -0.9713242  4.997631   4.995001   5.000215 2.299255   0.9494 6.869329
4  -0.9619583  4.997606   4.995308   4.999956 2.300678   0.9432 6.882506
5  -0.9732548  4.997696   4.997010   4.998385 2.303231   0.9536 6.875761
6  -0.9755249  4.997812   4.991528   5.004120 2.402572   0.9116 7.235257
7  -0.9730745  4.997979   4.995645   5.000163 2.323045   0.9210 7.050252
8  -0.9663527  4.997325   4.994964   4.999783 2.308183   0.9422 6.897667
9  -0.9607369  4.997161   4.995197   4.999127 2.309868   0.9348 6.936934
10 -0.9453500  4.997970   4.997309   4.998605 2.296007   0.9460 6.867453
11 -0.9842528  4.999451   4.989744   5.008882 2.425706   0.9506 6.996251
12 -0.9831396  4.998311   4.995655   5.001130 2.303398   0.9434 6.879362
13 -0.9718765  4.997685   4.995115   5.000203 2.301221   0.9494 6.868747
14 -0.9621565  4.997611   4.995316   4.999924 2.300774   0.9426 6.878265
15 -0.9720372  4.997402   4.996718   4.998068 2.312966   0.9490 6.880734
> 
> proc.time()
   user  system elapsed 
 13.505   1.073  14.625 
