
R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Tables for paper
> DC_full_gp <- readRDS("results/d_and_c/full_gp/final_results.RDS")
> DC_mpp <- readRDS("results/d_and_c/mpp/final_results.RDS")
> DC_sparse_gp <- readRDS("results/d_and_c/sparse_gp/final_results.RDS")
> sketch_full_gp <- readRDS("results/sketching/full_gp/final_results.RDS")
> sketch_mpp <- readRDS("results/sketching/mpp/final_results.RDS")
> sketch_sparse_gp <- readRDS("results/sketching/sparse_gp/final_results.RDS")
> load("data/test.RData")
> 
> # Check acceptance rates first
> sapply(DC_full_gp, \(x) x$acc)
          [,1]    [,2]    [,3]    [,4]
sigma2 0.27028 0.24940 0.23488 0.22896
tau2   0.13712 0.16024 0.21992 0.24692
> sapply(DC_mpp, \(x) x$acc)
          [,1]    [,2]    [,3]    [,4]
sigma2 0.21644 0.18960 0.19540 0.19268
tau2   0.37416 0.62396 0.65804 0.62548
> sapply(DC_sparse_gp, \(x) x$acc)
          [,1]    [,2]    [,3]    [,4]
sigma2 0.26304 0.24600 0.23000 0.22752
tau2   0.14304 0.16152 0.23796 0.23796
> sketch_full_gp$acc
 sigma2    tau2 
0.18768 0.18304 
> sketch_mpp$acc
sigma2   tau2 
0.1708 0.2672 
> sketch_sparse_gp$acc
 sigma2    tau2 
0.18260 0.19224 
> 
> test_subjects <- 6:10
> nTestSubj <- length(test_subjects)
> model <- rep(c("Full_GP", "MPP", "Sparse_GP"), each = 5)
> splitType <- rep(c("Subdomains", "Stratified", "Multiplets", "Random", "Sketching"), 3)
> 
> #######################################################################
> 
> sigma2Mean <- unname(c(sapply(DC_full_gp, \(x) x$means[1]), 
+                        sketch_full_gp$means[1],
+                        sapply(DC_mpp, \(x) x$means[1]),
+                        sketch_mpp$means[1],
+                        sapply(DC_sparse_gp, \(x) x$means[1]),
+                        sketch_sparse_gp$means[1]))
> 
> sigma2Lower <- unname(c(sapply(DC_full_gp, \(x) x$lower[1]), 
+                         sketch_full_gp$lower[1],
+                         sapply(DC_mpp, \(x) x$lower[1]),
+                         sketch_mpp$lower[1],
+                         sapply(DC_sparse_gp, \(x) x$lower[1]),
+                         sketch_sparse_gp$lower[1]))
> 
> sigma2Upper <- unname(c(sapply(DC_full_gp, \(x) x$upper[1]), 
+                         sketch_full_gp$upper[1],
+                         sapply(DC_mpp, \(x) x$upper[1]),
+                         sketch_mpp$upper[1],
+                         sapply(DC_sparse_gp, \(x) x$upper[1]),
+                         sketch_sparse_gp$upper[1]))
> 
> #######################################################################
> 
> tau2Mean <- unname(c(sapply(DC_full_gp, \(x) x$means[2]), 
+                      sketch_full_gp$means[2],
+                      sapply(DC_mpp, \(x) x$means[2]),
+                      sketch_mpp$means[2],
+                      sapply(DC_sparse_gp, \(x) x$means[2]),
+                      sketch_sparse_gp$means[2]))
> 
> tau2Lower <- unname(c(sapply(DC_full_gp, \(x) x$lower[2]), 
+                       sketch_full_gp$lower[2],
+                       sapply(DC_mpp, \(x) x$lower[2]),
+                       sketch_mpp$lower[2],
+                       sapply(DC_sparse_gp, \(x) x$lower[2]),
+                       sketch_sparse_gp$lower[2]))
> 
> tau2Upper <- unname(c(sapply(DC_full_gp, \(x) x$upper[2]), 
+                       sketch_full_gp$upper[2],
+                       sapply(DC_mpp, \(x) x$upper[2]),
+                       sketch_mpp$upper[2],
+                       sapply(DC_sparse_gp, \(x) x$upper[2]),
+                       sketch_sparse_gp$upper[2]))
> 
> #######################################################################
> 
> gammaMean <- unname(c(sapply(DC_full_gp, \(x) x$means[3]), 
+                       sketch_full_gp$means[3],
+                       sapply(DC_mpp, \(x) x$means[3]),
+                       sketch_mpp$means[3],
+                       sapply(DC_sparse_gp, \(x) x$means[3]),
+                       sketch_sparse_gp$means[3]))
> 
> gammaLower <- unname(c(sapply(DC_full_gp, \(x) x$lower[3]), 
+                        sketch_full_gp$lower[3],
+                        sapply(DC_mpp, \(x) x$lower[3]),
+                        sketch_mpp$lower[3],
+                        sapply(DC_sparse_gp, \(x) x$lower[3]),
+                        sketch_sparse_gp$lower[3]))
> 
> gammaUpper <- unname(c(sapply(DC_full_gp, \(x) x$upper[3]), 
+                        sketch_full_gp$upper[3],
+                        sapply(DC_mpp, \(x) x$upper[3]),
+                        sketch_mpp$upper[3],
+                        sapply(DC_sparse_gp, \(x) x$upper[3]),
+                        sketch_sparse_gp$upper[3]))
> 
> #######################################################################
> 
> beta1Mean <- unname(c(sapply(DC_full_gp, \(x) x$means[4]), 
+                       sketch_full_gp$means[4],
+                       sapply(DC_mpp, \(x) x$means[4]),
+                       sketch_mpp$means[4],
+                       sapply(DC_sparse_gp, \(x) x$means[4]),
+                       sketch_sparse_gp$means[4]))
> 
> beta1Lower <- unname(c(sapply(DC_full_gp, \(x) x$lower[4]), 
+                        sketch_full_gp$lower[4],
+                        sapply(DC_mpp, \(x) x$lower[4]),
+                        sketch_mpp$lower[4],
+                        sapply(DC_sparse_gp, \(x) x$lower[4]),
+                        sketch_sparse_gp$lower[4]))
> 
> beta1Upper <- unname(c(sapply(DC_full_gp, \(x) x$upper[4]), 
+                        sketch_full_gp$upper[4],
+                        sapply(DC_mpp, \(x) x$upper[4]),
+                        sketch_mpp$upper[4],
+                        sapply(DC_sparse_gp, \(x) x$upper[4]),
+                        sketch_sparse_gp$upper[4]))
> 
> #######################################################################
> 
> beta2Mean <- unname(c(sapply(DC_full_gp, \(x) x$means[5]), 
+                       sketch_full_gp$means[5],
+                       sapply(DC_mpp, \(x) x$means[5]),
+                       sketch_mpp$means[5],
+                       sapply(DC_sparse_gp, \(x) x$means[5]),
+                       sketch_sparse_gp$means[5]))
> 
> beta2Lower <- unname(c(sapply(DC_full_gp, \(x) x$lower[5]), 
+                        sketch_full_gp$lower[5],
+                        sapply(DC_mpp, \(x) x$lower[5]),
+                        sketch_mpp$lower[5],
+                        sapply(DC_sparse_gp, \(x) x$lower[5]),
+                        sketch_sparse_gp$lower[5]))
> 
> beta2Upper <- unname(c(sapply(DC_full_gp, \(x) x$upper[5]), 
+                        sketch_full_gp$upper[5],
+                        sapply(DC_mpp, \(x) x$upper[5]),
+                        sketch_mpp$upper[5],
+                        sapply(DC_sparse_gp, \(x) x$upper[5]),
+                        sketch_sparse_gp$upper[5]))
> 
> #######################################################################
> 
> MSPE <- cvg_ind <- score <- numeric(15)
> 
> for (i in 1:nTestSubj) {
+   lowerPreds <- rbind(t(sapply(DC_full_gp, \(x) x$predictions[[i]][1, ])),
+ 		      sketch_full_gp$predictions[[i]][1, ],
+ 		      t(sapply(DC_mpp, \(x) x$predictions[[i]][1, ])),
+                       sketch_mpp$predictions[[i]][1, ],
+ 		      t(sapply(DC_sparse_gp, \(x) x$predictions[[i]][1, ])),
+                       sketch_sparse_gp$predictions[[i]][1, ])
+   upperPreds <- rbind(t(sapply(DC_full_gp, \(x) x$predictions[[i]][3, ])),
+                       sketch_full_gp$predictions[[i]][3, ],
+                       t(sapply(DC_mpp, \(x) x$predictions[[i]][3, ])),
+                       sketch_mpp$predictions[[i]][3, ],
+                       t(sapply(DC_sparse_gp, \(x) x$predictions[[i]][3, ])),
+                       sketch_sparse_gp$predictions[[i]][3, ])
+   pointPreds <- rbind(t(sapply(DC_full_gp, \(x) x$predictions[[i]][2, ])),
+                       sketch_full_gp$predictions[[i]][2, ],
+                       t(sapply(DC_mpp, \(x) x$predictions[[i]][2, ])),
+                       sketch_mpp$predictions[[i]][2, ],
+                       t(sapply(DC_sparse_gp, \(x) x$predictions[[i]][2, ])),
+                       sketch_sparse_gp$predictions[[i]][2, ])
+ 
+   MSPE <- MSPE + apply(pointPreds, 1, \(x) mean((x - test$Y[[i]])^2))
+   cvg_ind <- cvg_ind + sapply(1:15, \(j) lowerPreds[j, ] <= test$Y[[i]] & upperPreds[j, ] >= test$Y[[i]])
+   a <- .05
+   score <- score + sapply(1:15, \(j) mean( (upperPreds[j,] - lowerPreds[j,]) +
+                                    2/a * (lowerPreds[j,] - test$Y[[i]]) *
+                                    (test$Y[[i]] < lowerPreds[j,]) + 2/a *
+                                    (test$Y[[i]] - upperPreds[j,]) *
+                                    (test$Y[[i]] > upperPreds[j,]) ) )
+ }
> MSPE <- MSPE / length(test_subjects)
> cvg_ind <- cvg_ind / length(test_subjects)
> coverage <- apply(cvg_ind, 2, mean)
> score <- score / length(test_subjects)
> 
> df <- data.frame(model, splitType,
+                  sigma2Mean, sigma2Lower, sigma2Upper,
+                  tau2Mean, tau2Lower, tau2Upper,
+                  beta1Mean, beta1Lower, beta1Upper,
+                  beta2Mean, beta2Lower, beta2Upper,
+ 		 gammaMean, gammaLower, gammaUpper,
+                  MSPE, coverage, score)
> 
> df
       model  splitType sigma2Mean sigma2Lower sigma2Upper   tau2Mean
1    Full_GP Subdomains   2.043047    2.005083    2.081021 0.20742089
2    Full_GP Stratified   1.964952    1.935191    1.995652 0.20307825
3    Full_GP Multiplets   1.900358    1.869030    1.932075 0.25496151
4    Full_GP     Random   1.923915    1.892244    1.954619 0.22973141
5    Full_GP  Sketching   1.814979    1.782108    1.850023 0.30264061
6        MPP Subdomains   1.656233    1.628364    1.683854 0.14940161
7        MPP Stratified   1.798161    1.778171    1.816942 0.03964915
8        MPP Multiplets   1.966727    1.943477    1.989340 0.05600243
9        MPP     Random   1.943554    1.916429    1.970057 0.07605635
10       MPP  Sketching   1.856251    1.825356    1.887622 0.23053902
11 Sparse_GP Subdomains   1.999639    1.963648    2.034636 0.20483232
12 Sparse_GP Stratified   1.920225    1.891495    1.949113 0.19550733
13 Sparse_GP Multiplets   1.895589    1.864802    1.925926 0.23254502
14 Sparse_GP     Random   1.917932    1.886848    1.950416 0.22406398
15 Sparse_GP  Sketching   1.852999    1.819896    1.884350 0.26258648
    tau2Lower  tau2Upper beta1Mean beta1Lower beta1Upper  beta2Mean beta2Lower
1  0.20162275 0.21345841  1.954091   1.605797   2.292662 -1.0006901 -1.0153378
2  0.19707466 0.20940313  1.965826   1.870021   2.059947 -0.9965783 -1.0124602
3  0.24243138 0.26702821  1.973399   1.903601   2.043780 -0.9968934 -1.0167596
4  0.21785405 0.24143789  1.965034   1.896559   2.033546 -1.0006971 -1.0212828
5  0.28733666 0.31760609  1.965707   1.948597   1.983493 -0.9885338 -0.9958884
6  0.13601838 0.16304015  2.255285   2.047468   2.478266 -0.9986718 -1.0193028
7  0.03326008 0.04681036  1.983326   1.914031   2.053499 -0.9909880 -1.0120010
8  0.04748291 0.06622639  1.973347   1.913266   2.035485 -0.9971762 -1.0203691
9  0.06409737 0.08984483  1.960992   1.899471   2.020684 -0.9928214 -1.0160313
10 0.21598039 0.24691551  1.961800   1.945098   1.978545 -0.9771724 -0.9849885
11 0.19904785 0.21085456  1.947010   1.620362   2.278229 -1.0006145 -1.0155782
12 0.18949325 0.20163737  1.960513   1.869896   2.051667 -0.9963904 -1.0124267
13 0.22052936 0.24449718  1.971986   1.903627   2.036309 -0.9965169 -1.0165557
14 0.21224603 0.23642750  1.961576   1.893601   2.030114 -1.0004420 -1.0208382
15 0.24957473 0.27729093  1.966672   1.948716   1.983690 -0.9944884 -1.0020338
   beta2Upper gammaMean gammaLower gammaUpper     MSPE coverage    score
1  -0.9860445  4.994726   4.985817   5.003461 2.194880   0.9540 7.012342
2  -0.9809465  4.996795   4.994104   4.999435 2.187074   0.9494 6.966089
3  -0.9765434  4.997410   4.995020   4.999805 2.188124   0.9484 6.949088
4  -0.9799796  4.997505   4.995127   4.999896 2.187398   0.9478 6.958702
5  -0.9810304  4.997500   4.996889   4.998131 2.183424   0.9442 6.943869
6  -0.9772867  4.996883   4.991440   5.002520 2.353580   0.9158 7.387665
7  -0.9699966  4.996409   4.994303   4.998566 2.194536   0.9276 7.080343
8  -0.9738721  4.996958   4.994851   4.999043 2.190175   0.9388 6.976993
9  -0.9682962  4.996972   4.994848   4.999039 2.185249   0.9398 6.972788
10 -0.9694527  4.997723   4.997134   4.998320 2.182923   0.9450 6.952075
11 -0.9860962  4.994767   4.986153   5.003485 2.193967   0.9520 7.004879
12 -0.9805499  4.996639   4.994068   4.999169 2.185246   0.9458 6.955977
13 -0.9761097  4.997434   4.995102   4.999801 2.187265   0.9458 6.954039
14 -0.9797583  4.997540   4.995178   4.999858 2.184890   0.9468 6.948039
15 -0.9869596  4.996605   4.995974   4.997246 2.189912   0.9458 6.975562
> 
> proc.time()
   user  system elapsed 
  0.458   0.107   0.575 
