
R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> # SURFACE PLOTS USING MBA PACKAGE
> library(MBA)
> library(fields)
Loading required package: spam
Spam version 2.9-1 (2022-08-07) is loaded.
Type 'help( Spam)' or 'demo( spam)' for a short introduction 
and overview of this package.
Help for individual functions is also obtained by adding the
suffix '.spam' to the function name, e.g. 'help( chol.spam)'.

Attaching package: ‘spam’

The following objects are masked from ‘package:base’:

    backsolve, forwardsolve

Loading required package: viridis
Loading required package: viridisLite

Try help(fields) to get started.
> load("data/test.RData")
> test_subj <- 1
> 
> # True spatial surface (subject 1)
> trueY <- test$Y[[test_subj]]
> coords <- test$S
> pred.surf <-  mba.surf(cbind(coords, trueY), no.X=100, no.Y=100, extend=T)$xyz.est
> pdf("../figures/simulations/true_surface.pdf")
> par(cex = 1.3)
> image.plot(pred.surf, xaxs ="r", yaxs = "r", main="", col = hcl.colors(12, "YlOrRd", rev=TRUE))
> contour(pred.surf, add=T)
> dev.off()
null device 
          1 
> 
> # Estimated spatial surface (D-and-C, full GP, stratified split)
> # Passes in same coordinates (S) from original data
> full_gp <- readRDS("results/d_and_c/full_gp_results.RDS")[[2]]
> estY <- full_gp$predictions[[test_subj]][2, ]
> pred.surf <-  mba.surf(cbind(coords, estY), no.X=100, no.Y=100, extend=T)$xyz.est
> pdf("../figures/simulations/dc_full_gp.pdf")
> par(cex = 1.2)
> image(pred.surf, xaxs ="r", yaxs = "r", main="")
> contour(pred.surf, add=T)
> dev.off()
null device 
          1 
> 
> # Estimated spatial surface (D-and-C, MPP, stratified split)
> # Passes in same coordinates (S) from original data
> mpp <- readRDS("results/d_and_c/mpp_results.RDS")[[2]]
> estY <- mpp$predictions[[test_subj]][2, ]
> pred.surf <-  mba.surf(cbind(coords, estY), no.X=100, no.Y=100, extend=T)$xyz.est
> pdf("../figures/simulations/dc_mpp.pdf")
> par(cex = 1.2)
> image(pred.surf, xaxs ="r", yaxs = "r", main="")
> contour(pred.surf, add=T)
> dev.off()
null device 
          1 
> 
> # Estimated spatial surface (D-and-C, sparse GP, stratified split)
> # Passes in same coordinates (S) from original data
> sparse_gp <- readRDS("results/d_and_c/sparse_gp_results.RDS")[[2]]
> estY <- sparse_gp$predictions[[test_subj]][2, ]
> pred.surf <-  mba.surf(cbind(coords, estY), no.X=100, no.Y=100, extend=T)$xyz.est
> pdf("../figures/simulations/dc_sparse_gp.pdf")
> par(cex = 1.2)
> image(pred.surf, xaxs ="r", yaxs = "r", main="")
> contour(pred.surf, add=T)
> dev.off()
null device 
          1 
> 
> 
> # Estimated spatial surface (Sketching, full GP)
> # Passes in same coordinates (S) from original data
> full_gp <- readRDS("results/sketching/full_gp_results.RDS")
> estY <- full_gp$predictions[[test_subj]][2, ]
> pred.surf <-  mba.surf(cbind(coords, estY), no.X=100, no.Y=100, extend=T)$xyz.est
> pdf("../figures/simulations/sketching_full_gp.pdf")
> par(cex = 1.2)
> image(pred.surf, xaxs ="r", yaxs = "r", main="")
> contour(pred.surf, add=T)
> dev.off()
null device 
          1 
> 
> # Estimated spatial surface (Sketching, MPP)
> # Passes in same coordinates (S) from original data
> mpp <- readRDS("results/sketching/mpp_results.RDS")
> estY <- mpp$predictions[[test_subj]][2, ]
> pred.surf <-  mba.surf(cbind(coords, estY), no.X=100, no.Y=100, extend=T)$xyz.est
> pdf("../figures/simulations/sketching_mpp.pdf")
> par(cex = 1.2)
> image(pred.surf, xaxs ="r", yaxs = "r", main="")
> contour(pred.surf, add=T)
> dev.off()
null device 
          1 
> 
> # Estimated spatial surface (Sketching, sparse GP)
> # Passes in same coordinates (S) from original data
> sparse_gp <- readRDS("results/sketching/sparse_gp_results.RDS")
> estY <- sparse_gp$predictions[[test_subj]][2, ]
> pred.surf <-  mba.surf(cbind(coords, estY), no.X=100, no.Y=100, extend=T)$xyz.est
> pdf("../figures/simulations/sketching_sparse_gp.pdf")
> par(cex = 1.2)
> image(pred.surf, xaxs ="r", yaxs = "r", main="")
> contour(pred.surf, add=T)
> dev.off()
null device 
          1 
> 
> # Plot of MSPE as a function of m
> # Plot of MSPE as a function of m
> mspe <- readRDS("results/mspe.RDS")
> index <- which(mspe$mVals >= 5)
> mVals <- mspe$mVals[index]
> MSPE <- mspe$MSPE[index]
> time <- mspe$time[index]
> pdf("../figures/mspe_by_dim.pdf", width = 8, height = 5)
> par(mar=c(5, 6, 4, 7) + 0.1)
> 
> ## Plot first set of data and draw its axis
> plot(mVals, MSPE, pch=19, axes=FALSE, xlab="", ylab="", cex = 1.5, lwd = 4,
+      , type="b",col="royalblue4", main="", ylim = c(2.25, 2.5))
> axis(2, ylim=c(2.25,2.5),col="royalblue4",col.axis="royalblue4",
+      las=1, cex.axis=1.3)  ## las=1 makes horizontal labels
> mtext("MSPE",side=2,line=4.5, col="royalblue4",cex=1.6)
> box()
> 
> ## Allow a second plot on the same graph
> par(new=TRUE)
> 
> ## Plot the second plot and put axis scale on right
> plot(mVals, time, pch=19,  xlab="", ylab="", ylim=c(1.8,2.4), 
+      cex = 1.5, lwd = 4,
+      axes=FALSE, type="b", col="red4")
> ## a little farther out (line=4) to make room for labels
> mtext("Time (h)",side=4,col="red4",line=4, cex=1.6) 
> axis(4, ylim=c(1.8, 2.4), col="red4",col.axis="red4",las=1, cex.axis=1.3)
> 
> ## Draw the time axis
> axis(1, seq(0, 500, by = 100), cex.axis=1.3)
> mtext("Reduced Dimension Size (m)",side=1,col="black",line=2.5, cex=1.6)  
> 
> dev.off()
null device 
          1 
> 
> proc.time()
   user  system elapsed 
  2.330   0.269   3.134 
