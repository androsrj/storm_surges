
R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(ggplot2)
> library(ggpubr)
> library(tidyr)
> 
> # Tables for paper
> DC_full_gp <- readRDS("results/d_and_c/full_gp/final_results.RDS")
> DC_mpp <- readRDS("results/d_and_c/mpp/final_results.RDS")
> DC_sparse_gp <- readRDS("results/d_and_c/sparse_gp/final_results.RDS")
> sketch_full_gp <- readRDS("results/sketching/full_gp/final_results.RDS")
> sketch_mpp <- readRDS("results/sketching/mpp/final_results.RDS")
> sketch_sparse_gp <- readRDS("results/sketching/sparse_gp/final_results.RDS")
> load("data/test.RData")
> 
> # Check acceptance rates first
> sapply(DC_full_gp, \(x) x$acc)
          [,1]    [,2]    [,3]    [,4]
sigma2 0.25980 0.24868 0.24312 0.24140
tau2   0.14192 0.16352 0.20652 0.23508
> sapply(DC_mpp, \(x) x$acc)
          [,1]    [,2]    [,3]    [,4]
sigma2 0.22168 0.19644 0.19220 0.19324
tau2   0.34180 0.60372 0.70212 0.63920
> sapply(DC_sparse_gp, \(x) x$acc)
          [,1]    [,2]    [,3]    [,4]
sigma2 0.26036 0.24436 0.23308 0.23472
tau2   0.14956 0.16592 0.22892 0.23340
> sketch_full_gp$acc
 sigma2    tau2 
0.19804 0.15436 
> sketch_mpp$acc
 sigma2    tau2 
0.17356 0.25788 
> sketch_sparse_gp$acc
 sigma2    tau2 
0.18296 0.18476 
> 
> model <- rep(c("Full_GP", "MPP", "Sparse_GP"), each = 5)
> splitType <- rep(c("Subdomains", "Stratified", "Multiplets", "Random", "Sketching"), 3)
> test_subj <- 1
> 
> #######################################################################
> 
> lowerPreds <- rbind(t(sapply(DC_full_gp, \(x) x$predictions[[test_subj]][1, ])), 
+                     sketch_full_gp$predictions[[test_subj]][1, ],
+                     t(sapply(DC_mpp, \(x) x$predictions[[test_subj]][1, ])), 
+                     sketch_mpp$predictions[[test_subj]][1, ],
+                     t(sapply(DC_sparse_gp, \(x) x$predictions[[test_subj]][1, ])),
+                     sketch_sparse_gp$predictions[[test_subj]][1, ])
> 
> upperPreds <- rbind(t(sapply(DC_full_gp, \(x) x$predictions[[test_subj]][3, ])), 
+                     sketch_full_gp$predictions[[test_subj]][3, ],
+                     t(sapply(DC_mpp, \(x) x$predictions[[test_subj]][3, ])), 
+                     sketch_mpp$predictions[[test_subj]][3, ],
+                     t(sapply(DC_sparse_gp, \(x) x$predictions[[test_subj]][3, ])),
+                     sketch_sparse_gp$predictions[[test_subj]][3, ])
> 
> pointPreds <- rbind(t(sapply(DC_full_gp, \(x) x$predictions[[test_subj]][2, ])), 
+                     sketch_full_gp$predictions[[test_subj]][2, ],
+                     t(sapply(DC_mpp, \(x) x$predictions[[test_subj]][2, ])), 
+                     sketch_mpp$predictions[[test_subj]][2, ],
+                     t(sapply(DC_sparse_gp, \(x) x$predictions[[test_subj]][2, ])),
+                     sketch_sparse_gp$predictions[[test_subj]][2, ])
> 
> MSPE <- apply(pointPreds, 1, \(x) mean((x - test$Y[[test_subj]])^2))
> cvg_ind <- sapply(1:15, \(i) lowerPreds[i, ] <= test$Y[[test_subj]] & upperPreds[i, ] >= test$Y[[test_subj]])
> coverage <- apply(cvg_ind, 2, mean)
> length <- apply(upperPreds - lowerPreds, 1, mean)
> a <- .05
> score <- sapply(1:15, \(i) mean( (upperPreds[i,] - lowerPreds[i,]) + 2/a * (lowerPreds[i,] - test$Y[[test_subj]]) * (test$Y[[test_subj]] < lowerPreds[i,]) + 2/a * (test$Y[[test_subj]] - upperPreds[i,]) * (test$Y[[test_subj]] > upperPreds[i,]) ) )
> 
> df <- data.frame(model, splitType, MSPE, score)
> df$splitType <- factor(df$splitType, levels = c("Subdomains", "Stratified", "Multiplets", "Random", "Sketching"))
> 
> full_gp <- gather(df[1:5, ], metric, value, MSPE:score)
> mpp <- gather(df[6:10, ], metric, value, MSPE:score)
> sparse_gp <- gather(df[11:15, ], metric, value, MSPE:score)
> 
> plot_f <- ggplot(full_gp, aes(splitType, value, fill = metric)) + 
+   geom_bar(stat = "identity", 
+            position = 'dodge', 
+            colour = 'black') + 
+   guides(fill=guide_legend(title = NULL)) +
+   scale_fill_discrete(labels = c('MSPE', 'Interval Score')) +
+   labs(x = "",y = "") + 
+   theme(panel.background = element_blank()) +
+   theme(axis.line = element_line(colour = "black")) + 
+   theme(legend.position="none") + 
+   theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + 
+   theme(axis.text = element_text(size = 12), legend.text=element_text(size = 12)) +
+   theme(plot.title = element_text(hjust = 0.5)) +
+   ggtitle("Full GP")
> 
> plot_m <- ggplot(mpp, aes(splitType, value, fill = metric)) + 
+   geom_bar(stat = "identity", 
+            position = 'dodge', 
+            colour = 'black') + 
+   guides(fill=guide_legend(title = NULL)) +
+   scale_fill_discrete(labels = c('MSPE', 'Interval Score')) +
+   labs(x = "",y = "") + 
+   theme(panel.background = element_blank()) +
+   theme(axis.line = element_line(colour = "black")) + 
+   theme(legend.position="none") + 
+   theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + 
+   theme(axis.text = element_text(size = 12), legend.text=element_text(size = 12)) +
+   theme(plot.title = element_text(hjust = 0.5)) +
+   ggtitle("MPP")
> 
> plot_s <- ggplot(sparse_gp, aes(splitType, value, fill = metric)) + 
+   geom_bar(stat = "identity", 
+            position = 'dodge', 
+            colour = 'black') + 
+   guides(fill=guide_legend(title = NULL)) +
+   scale_fill_discrete(labels = c('MSPE', 'Interval Score')) +
+   labs(x = "",y = "") + 
+   theme(panel.background = element_blank()) +
+   theme(axis.line = element_line(colour = "black")) + 
+   theme(legend.position = "none") + 
+   theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + 
+   theme(axis.text = element_text(size = 12), legend.text=element_text(size = 12)) +
+   theme(plot.title = element_text(hjust = 0.5)) +
+   ggtitle("Sparse GP")
> 
> pdf("../figures/pred_diagnostics.pdf")
> ggarrange(plot_f, plot_m, plot_s, ncol = 3, nrow = 1, common.legend = TRUE, legend = "bottom")
> dev.off()
null device 
          1 
> 
> 
> # Plot of MSPE as a function of m
> mspe <- readRDS("results/mspe.RDS")
> mVals <- mspe$mVals
> MSPE <- mspe$MSPE
> pdf("../figures/mspe_by_dim.pdf")
> plot(mVals, MSPE, type='b', xlab = "Reduced Dimension Size (m)", cex = 1.5, lwd = 2)
> dev.off()
null device 
          1 
> 
> proc.time()
   user  system elapsed 
  2.265   0.243   2.670 
