
R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> # SOURCES
> source("../mcmc_functions/mcmc.R") # Metropolis-Gibbs Sampler
> source("../mcmc_functions/priors.R")
> source("../mcmc_functions/jacobians.R")
> source("../mcmc_functions/likelihood.R")
> source("../mcmc_functions/posterior.R")
> source("../other_functions/helper_functions.R") # Other misc functions (not part of MCMC)
> source("../other_functions/parallel_functions.R")
> 
> # Libraries
> library(parallel) # For parallel computation
> library(doParallel) # For parallel computation
Loading required package: foreach
Loading required package: iterators
> library(foreach) # For parallel computation
> library(fields) # Distance matrix calculation
Loading required package: spam
Spam version 2.9-1 (2022-08-07) is loaded.
Type 'help( Spam)' or 'demo( spam)' for a short introduction 
and overview of this package.
Help for individual functions is also obtained by adding the
suffix '.spam' to the function name, e.g. 'help( chol.spam)'.

Attaching package: ‘spam’

The following objects are masked from ‘package:mvtnorm’:

    rmvnorm, rmvt

The following objects are masked from ‘package:base’:

    backsolve, forwardsolve

Loading required package: viridis
Loading required package: viridisLite

Try help(fields) to get started.
> library(mvtnorm)
> 
> # Number of clusters for parallel implementation
> nCores <- 10
> mySeed <- 9999
> 
> # Load train and test data
> load("data/train.RData")
> load("data/test.RData")
> nSubj <- length(train$X)
> n <- nrow(train$X[[1]])
> nTest <- nrow(test$X[[1]])
> X <- train$X
> Y <- train$Y
> S <- train$S
> D <- train$D
> XTest <- test$X
> YTest <- test$Y
> STest <- test$S
> DTest <- test$D
>   
> mVals <- c(1, 2, 5, 10, 25, 50, 100, 200, 300, 400, 500)
> mPropVals <- mVals / n
> thetaVals <- seq(1, 5, length = nCores)
> model <- "full_gp"
> test_subjects <- 1:10
> propSD <- c(0.05, 0.25)
> MSPE <- numeric(length(mVals))
> acc <- matrix(0, nrow = length(mVals), ncol = 2)
> 
> for (i in 1:length(mVals)) {
+   mProp <- mPropVals[[i]]
+   
+   cl <- makeCluster(nCores)
+   registerDoParallel(cl)
+   strt <- Sys.time()
+   set.seed(mySeed)
+   obj <- foreach(i = 1:nCores, .packages = "mvtnorm") %dopar% sketching_parallel(i)  
+   final.time <- Sys.time() - strt 
+   stopCluster(cl)
+ 
+   accVals <- lapply(obj, \(x) x$acceptance)
+   acc[i, ] <- Reduce("+", accVals) / length(accVals)
+   
+   for (j in test_subjects) {
+     predsList <- lapply(obj, \(x) x$preds[[j]])
+     predictions <- Reduce("+", predsList) / length(predsList)
+     MSPE[i] <- MSPE[i] + mean((predictions[2, ] - test$Y[[j]])^2)
+   }
+   MSPE[i] <- MSPE[i] / length(test_subjects)
+ }
> 
> saveRDS(list(mVals = mVals, MSPE = MSPE), "results/mspe.RDS")
> mVals
 [1]   1   2   5  10  25  50 100 200 300 400 500
> MSPE
 [1] 4.037968 3.566571 2.798922 2.381703 2.350746 2.350880 2.314845 2.306366
 [9] 2.286826 2.303746 2.295538
> acc
         [,1]    [,2]
 [1,] 0.21056 0.06432
 [2,] 0.19972 0.10448
 [3,] 0.46500 0.14208
 [4,] 0.32316 0.32736
 [5,] 0.44000 0.21132
 [6,] 0.36372 0.19936
 [7,] 0.26092 0.19016
 [8,] 0.17668 0.19420
 [9,] 0.15048 0.24128
[10,] 0.15708 0.17032
[11,] 0.15036 0.20932
> 
> proc.time()
     user    system   elapsed 
  119.170    32.044 19526.838 
