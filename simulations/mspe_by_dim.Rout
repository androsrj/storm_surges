
R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> # SOURCES
> source("../mcmc_functions/mcmc.R") # Metropolis-Gibbs Sampler
> source("../mcmc_functions/priors.R")
> source("../mcmc_functions/jacobians.R")
> source("../mcmc_functions/likelihood.R")
> source("../mcmc_functions/posterior.R")
> source("../other_functions/sparse.R") # For sparse GP
> source("../other_functions/helper_functions.R") # Other misc functions (not part of MCMC)
> 
> # Libraries
> library(anticlust) # for balanced clustering
> library(splitTools) # for stratified splitting
> library(twinning) # for multiplet splitting
> library(parallel) # For parallel computation
> library(doParallel) # For parallel computation
Loading required package: foreach
Loading required package: iterators
> library(foreach) # For parallel computation
> library(fields) # Distance matrix calculation
Loading required package: spam
Spam version 2.9-1 (2022-08-07) is loaded.
Type 'help( Spam)' or 'demo( spam)' for a short introduction 
and overview of this package.
Help for individual functions is also obtained by adding the
suffix '.spam' to the function name, e.g. 'help( chol.spam)'.

Attaching package: ‘spam’

The following objects are masked from ‘package:mvtnorm’:

    rmvnorm, rmvt

The following objects are masked from ‘package:base’:

    backsolve, forwardsolve

Loading required package: viridis
Loading required package: viridisLite

Try help(fields) to get started.
> library(mvtnorm)
> library(pracma) # For sparse matrix calculation
> 
> # Number of clusters for parallel implementation
> nCores <- 10
> mySeed <- 1234
> 
> # Load train and test data
> load("data/train.RData")
> load("data/test.RData")
> nSubj <- length(train$X)
> n <- nrow(train$X[[1]])
> nTest <- nrow(test$X[[1]])
> X <- train$X
> Y <- train$Y
> S <- train$S
> D <- train$D
> XTest <- test$X
> YTest <- test$Y
> STest <- test$S
> DTest <- test$D
> 
> # Helper function to run subsets in parallel for sketching
> sketching_parallel <- function(i) {
+   results <- mcmc(X = X, Y = Y, D = D, S = S,
+                   nSubj = nSubj,
+                   theta = thetaVals[i],
+                   propSD = c(0.04, 0.3),
+                   nIter = 2000, nBurn = 500,
+                   model = model,
+                   mProp = mProp,
+                   transform = TRUE)
+   results
+ }
> 
> mVals <- c(5, 50, 100, 250, 500)
> mPropVals <- mVals / n
> thetaVals <- seq(1, 5, length = nCores)
> model <- "full_gp"
> test_subj <- nSubj
> MSPE <- numeric(length(mVals))
> mTrue <- matrix(0, nrow = length(mVals), ncol = nCores)
> 
> for (i in 1:length(mVals)) {
+   mProp <- mPropVals[[i]]
+   
+   cl <- makeCluster(nCores)
+   registerDoParallel(cl)
+   strt <- Sys.time()
+   set.seed(mySeed)
+   obj <- foreach(i = 1:nCores, .packages = "mvtnorm") %dopar% sketching_parallel(i)  
+   final.time <- Sys.time() - strt 
+   stopCluster(cl)
+   
+   predsList <- lapply(obj, \(x) x$preds)
+   predictions <- Reduce("+", predsList) / length(predsList)
+   MSPE[i] <- mean((predictions[2, ] - test$Y[[test_subj]])^2)
+   mTrue[i, ] <- sapply(obj, \(x) x$m)
+ }
> 
> saveRDS(list(mVals = mVals, MSPE = MSPE), "results/mspe.RDS")
> mVals
[1]   5  50 100 250 500
> MSPE
[1] 2.676968 2.375664 2.309003 2.315931 2.308227
> mTrue
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
[1,]    5    5    5    5    5    5    5    5    5     5
[2,]   50   50   50   50   50   50   50   50   50    50
[3,]  100  100  100  100  100  100  100  100  100   100
[4,]  250  250  250  250  250  250  250  250  250   250
[5,]  500  500  500  500  500  500  500  500  500   500
> 
> proc.time()
    user   system  elapsed 
  63.097   15.179 4664.365 
